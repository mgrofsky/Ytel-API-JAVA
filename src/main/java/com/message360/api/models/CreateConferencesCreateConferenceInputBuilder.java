/*
 * YtelAPILib
 *
 * This file was automatically generated by APIMATIC v2.0 ( https://apimatic.io ).
 */
package com.message360.api.models;

import java.util.*;

public class CreateConferencesCreateConferenceInputBuilder {
    //the instance to build
    private CreateConferencesCreateConferenceInput createConferencesCreateConferenceInput;

    /**
     * Default constructor to initialize the instance
     */
    public CreateConferencesCreateConferenceInputBuilder() {
        createConferencesCreateConferenceInput = new CreateConferencesCreateConferenceInput();
    }

    /**
     * A valid 10-digit number (E.164 format) that will be initiating the conference call.
     */
    public CreateConferencesCreateConferenceInputBuilder from(String from) {
        createConferencesCreateConferenceInput.setFrom(from);
        return this;
    }

    /**
     * A valid 10-digit number (E.164 format) that is to receive the conference call.
     */
    public CreateConferencesCreateConferenceInputBuilder to(String to) {
        createConferencesCreateConferenceInput.setTo(to);
        return this;
    }

    /**
     * URL requested once the conference connects
     */
    public CreateConferencesCreateConferenceInputBuilder url(String url) {
        createConferencesCreateConferenceInput.setUrl(url);
        return this;
    }

    /**
     * Specifies the HTTP method used to request the required URL once call connects.
     */
    public CreateConferencesCreateConferenceInputBuilder method(String method) {
        createConferencesCreateConferenceInput.setMethod(method);
        return this;
    }

    /**
     * URL that can be requested to receive notification when call has ended. A set of default parameters will be sent here once the conference is finished.
     */
    public CreateConferencesCreateConferenceInputBuilder statusCallBackUrl(String statusCallBackUrl) {
        createConferencesCreateConferenceInput.setStatusCallBackUrl(statusCallBackUrl);
        return this;
    }

    /**
     * Specifies the HTTP methodlinkclass used to request StatusCallbackUrl.
     */
    public CreateConferencesCreateConferenceInputBuilder statusCallBackMethod(String statusCallBackMethod) {
        createConferencesCreateConferenceInput.setStatusCallBackMethod(statusCallBackMethod);
        return this;
    }

    /**
     * URL requested if the initial Url parameter fails or encounters an error
     */
    public CreateConferencesCreateConferenceInputBuilder fallbackUrl(String fallbackUrl) {
        createConferencesCreateConferenceInput.setFallbackUrl(fallbackUrl);
        return this;
    }

    /**
     * Specifies the HTTP method used to request the required FallbackUrl once call connects.
     */
    public CreateConferencesCreateConferenceInputBuilder fallbackMethod(String fallbackMethod) {
        createConferencesCreateConferenceInput.setFallbackMethod(fallbackMethod);
        return this;
    }

    /**
     * Specifies if the conference should be recorded.
     */
    public CreateConferencesCreateConferenceInputBuilder record(Boolean record) {
        createConferencesCreateConferenceInput.setRecord(record);
        return this;
    }

    /**
     * Recording parameters will be sent here upon completion.
     */
    public CreateConferencesCreateConferenceInputBuilder recordCallBackUrl(String recordCallBackUrl) {
        createConferencesCreateConferenceInput.setRecordCallBackUrl(recordCallBackUrl);
        return this;
    }

    /**
     * Specifies the HTTP method used to request the required URL once conference connects.
     */
    public CreateConferencesCreateConferenceInputBuilder recordCallBackMethod(String recordCallBackMethod) {
        createConferencesCreateConferenceInput.setRecordCallBackMethod(recordCallBackMethod);
        return this;
    }

    /**
     * Schedule conference in future. Schedule time must be greater than current time
     */
    public CreateConferencesCreateConferenceInputBuilder scheduleTime(String scheduleTime) {
        createConferencesCreateConferenceInput.setScheduleTime(scheduleTime);
        return this;
    }

    /**
     * The number of seconds the call stays on the line while waiting for an answer. The max time limit is 999 and the default limit is 60 seconds but lower times can be set.
     */
    public CreateConferencesCreateConferenceInputBuilder timeout(Integer timeout) {
        createConferencesCreateConferenceInput.setTimeout(timeout);
        return this;
    }
    /**
     * Build the instance with the given values
     */
    public CreateConferencesCreateConferenceInput build() {
        return createConferencesCreateConferenceInput;
    }
}