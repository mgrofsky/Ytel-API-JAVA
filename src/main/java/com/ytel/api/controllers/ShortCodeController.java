/*
 * YtelAPIV3Lib
 *
 * This file was automatically generated by APIMATIC v2.0 ( https://apimatic.io ).
 */
package com.ytel.api.controllers;

import java.io.*;
import java.util.*;
import java.util.concurrent.*;

import com.ytel.api.*;
import com.ytel.api.models.*;
import com.ytel.api.exceptions.*;
import com.ytel.api.http.client.HttpClient;
import com.ytel.api.http.client.HttpContext;
import com.ytel.api.http.request.HttpRequest;
import com.ytel.api.http.response.HttpResponse;
import com.ytel.api.http.response.HttpStringResponse;
import com.ytel.api.http.client.APICallBack;
import com.ytel.api.controllers.syncwrapper.APICallBackCatcher;

public class ShortCodeController extends BaseController {    
    //private static variables for the singleton pattern
    private static Object syncObject = new Object();
    private static ShortCodeController instance = null;

    /**
     * Singleton pattern implementation 
     * @return The singleton instance of the ShortCodeController class 
     */
    public static ShortCodeController getInstance() {
        synchronized (syncObject) {
            if (null == instance) {
                instance = new ShortCodeController();
            }
        }
        return instance;
    }

    /**
     * Retrieve a list of Short Code assignment associated with your Ytel account.
     * @param    shortcode    Optional parameter: Only list Short Code Assignment sent from this Short Code
     * @param    page    Optional parameter: The page count to retrieve from the total results in the collection. Page indexing starts at 1.
     * @param    pagesize    Optional parameter: The count of objects to return per page.
     * @return    Returns the String response from the API call 
     */
    public String createListShortcodes(
                final String shortcode,
                final String page,
                final String pagesize
    ) throws Throwable {
        APICallBackCatcher<String> callback = new APICallBackCatcher<String>();
        createListShortcodesAsync(shortcode, page, pagesize, callback);
        if(!callback.isSuccess())
            throw callback.getError();
        return callback.getResult();
    }

    /**
     * Retrieve a list of Short Code assignment associated with your Ytel account.
     * @param    shortcode    Optional parameter: Only list Short Code Assignment sent from this Short Code
     * @param    page    Optional parameter: The page count to retrieve from the total results in the collection. Page indexing starts at 1.
     * @param    pagesize    Optional parameter: The count of objects to return per page.
     * @return    Returns the void response from the API call 
     */
    public void createListShortcodesAsync(
                final String shortcode,
                final String page,
                final String pagesize,
                final APICallBack<String> callBack
    ) {
        Runnable _responseTask = new Runnable() {
            public void run() {
                //the base uri for api requests
                String _baseUri = Configuration.baseUri;

                //prepare query string for API call
                StringBuilder _queryBuilder = new StringBuilder(_baseUri);
                _queryBuilder.append("/dedicatedshortcode/listshortcode.json");
                //validate and preprocess url
                String _queryUrl = APIHelper.cleanUrl(_queryBuilder);

                //load all headers for the outgoing API request
                Map<String, String> _headers = new HashMap<String, String>() {
                    private static final long serialVersionUID = 9024873901054908219L;
                    {
                        put( "user-agent", "APIMATIC 2.0" );
                    }
                };

                //load all fields for the outgoing API request
                Map<String, Object> _parameters = new HashMap<String, Object>() {
                    private static final long serialVersionUID = -1954947525L;
                    {
                        put( "Shortcode", shortcode );
                        put( "page", page );
                        put( "pagesize", pagesize );
                    }
                };

                //prepare and invoke the API call request to fetch the response
                final HttpRequest _request = getClientInstance().post(_queryUrl, _headers, APIHelper.prepareFormFields(_parameters),
                                                Configuration.basicAuthUserName, Configuration.basicAuthPassword);

                //invoke the callback before request if its not null
                if (getHttpCallBack() != null)
                {
                    getHttpCallBack().OnBeforeRequest(_request);
                }

                //invoke request and get response
                getClientInstance().executeAsStringAsync(_request, new APICallBack<HttpResponse>() {
                    public void onSuccess(HttpContext _context, HttpResponse _response) {
                        try {

                            //invoke the callback after response if its not null
                            if (getHttpCallBack() != null)	
                            {
                                getHttpCallBack().OnAfterResponse(_context);
                            }

                            //handle errors defined at the API level
                            validateResponse(_response, _context);

                            //extract result from the http response
                            String _result = ((HttpStringResponse)_response).getBody();
                            //let the caller know of the success
                            callBack.onSuccess(_context, _result);
                        } catch (APIException error) {
                            //let the caller know of the error
                            callBack.onFailure(_context, error);
                        } catch (Exception exception) {
                            //let the caller know of the caught Exception
                            callBack.onFailure(_context, exception);
                        }
                    }
                    public void onFailure(HttpContext _context, Throwable _error) {
                        //invoke the callback after response if its not null
                        if (getHttpCallBack() != null)
                        {
                            getHttpCallBack().OnAfterResponse(_context);
                        }

                        //let the caller know of the failure
                        callBack.onFailure(_context, _error);
                    }
                });
            }
        };

        //execute async using thread pool
        APIHelper.getScheduler().execute(_responseTask);
    }

    /**
     * Retrieve a single Short Code object by its shortcode assignment.
     * @param    shortcode    Required parameter: List of valid Dedicated Short Code to your Ytel account
     * @return    Returns the String response from the API call 
     */
    public String createViewSMS(
                final String shortcode
    ) throws Throwable {
        APICallBackCatcher<String> callback = new APICallBackCatcher<String>();
        createViewSMSAsync(shortcode, callback);
        if(!callback.isSuccess())
            throw callback.getError();
        return callback.getResult();
    }

    /**
     * Retrieve a single Short Code object by its shortcode assignment.
     * @param    shortcode    Required parameter: List of valid Dedicated Short Code to your Ytel account
     * @return    Returns the void response from the API call 
     */
    public void createViewSMSAsync(
                final String shortcode,
                final APICallBack<String> callBack
    ) {
        Runnable _responseTask = new Runnable() {
            public void run() {
                //the base uri for api requests
                String _baseUri = Configuration.baseUri;

                //prepare query string for API call
                StringBuilder _queryBuilder = new StringBuilder(_baseUri);
                _queryBuilder.append("/dedicatedshortcode/viewshortcode.json");
                //validate and preprocess url
                String _queryUrl = APIHelper.cleanUrl(_queryBuilder);

                //load all headers for the outgoing API request
                Map<String, String> _headers = new HashMap<String, String>() {
                    private static final long serialVersionUID = 9024873901054908219L;
                    {
                        put( "user-agent", "APIMATIC 2.0" );
                    }
                };

                //load all fields for the outgoing API request
                Map<String, Object> _parameters = new HashMap<String, Object>() {
                    private static final long serialVersionUID = -3673784710732348761L;
                    {
                        put( "Shortcode", shortcode );
                    }
                };

                //prepare and invoke the API call request to fetch the response
                final HttpRequest _request = getClientInstance().post(_queryUrl, _headers, APIHelper.prepareFormFields(_parameters),
                                                Configuration.basicAuthUserName, Configuration.basicAuthPassword);

                //invoke the callback before request if its not null
                if (getHttpCallBack() != null)
                {
                    getHttpCallBack().OnBeforeRequest(_request);
                }

                //invoke request and get response
                getClientInstance().executeAsStringAsync(_request, new APICallBack<HttpResponse>() {
                    public void onSuccess(HttpContext _context, HttpResponse _response) {
                        try {

                            //invoke the callback after response if its not null
                            if (getHttpCallBack() != null)	
                            {
                                getHttpCallBack().OnAfterResponse(_context);
                            }

                            //handle errors defined at the API level
                            validateResponse(_response, _context);

                            //extract result from the http response
                            String _result = ((HttpStringResponse)_response).getBody();
                            //let the caller know of the success
                            callBack.onSuccess(_context, _result);
                        } catch (APIException error) {
                            //let the caller know of the error
                            callBack.onFailure(_context, error);
                        } catch (Exception exception) {
                            //let the caller know of the caught Exception
                            callBack.onFailure(_context, exception);
                        }
                    }
                    public void onFailure(HttpContext _context, Throwable _error) {
                        //invoke the callback after response if its not null
                        if (getHttpCallBack() != null)
                        {
                            getHttpCallBack().OnAfterResponse(_context);
                        }

                        //let the caller know of the failure
                        callBack.onFailure(_context, _error);
                    }
                });
            }
        };

        //execute async using thread pool
        APIHelper.getScheduler().execute(_responseTask);
    }

    /**
     * View a single Sms Short Code message.
     * @param    messageSid    Required parameter: The unique identifier for the sms resource
     * @return    Returns the String response from the API call 
     */
    public String createViewSMS(
                final String messageSid
    ) throws Throwable {
        APICallBackCatcher<String> callback = new APICallBackCatcher<String>();
        createViewSMSAsync(messageSid, callback);
        if(!callback.isSuccess())
            throw callback.getError();
        return callback.getResult();
    }

    /**
     * View a single Sms Short Code message.
     * @param    messageSid    Required parameter: The unique identifier for the sms resource
     * @return    Returns the void response from the API call 
     */
    public void createViewSMSAsync(
                final String messageSid,
                final APICallBack<String> callBack
    ) {
        Runnable _responseTask = new Runnable() {
            public void run() {
                //the base uri for api requests
                String _baseUri = Configuration.baseUri;

                //prepare query string for API call
                StringBuilder _queryBuilder = new StringBuilder(_baseUri);
                _queryBuilder.append("/shortcode/viewsms.json");
                //validate and preprocess url
                String _queryUrl = APIHelper.cleanUrl(_queryBuilder);

                //load all headers for the outgoing API request
                Map<String, String> _headers = new HashMap<String, String>() {
                    private static final long serialVersionUID = 9024873901054908219L;
                    {
                        put( "user-agent", "APIMATIC 2.0" );
                    }
                };

                //load all fields for the outgoing API request
                Map<String, Object> _parameters = new HashMap<String, Object>() {
                    private static final long serialVersionUID = 4562468121865988708L;
                    {
                        put( "MessageSid", messageSid );
                    }
                };

                //prepare and invoke the API call request to fetch the response
                final HttpRequest _request = getClientInstance().post(_queryUrl, _headers, APIHelper.prepareFormFields(_parameters),
                                                Configuration.basicAuthUserName, Configuration.basicAuthPassword);

                //invoke the callback before request if its not null
                if (getHttpCallBack() != null)
                {
                    getHttpCallBack().OnBeforeRequest(_request);
                }

                //invoke request and get response
                getClientInstance().executeAsStringAsync(_request, new APICallBack<HttpResponse>() {
                    public void onSuccess(HttpContext _context, HttpResponse _response) {
                        try {

                            //invoke the callback after response if its not null
                            if (getHttpCallBack() != null)	
                            {
                                getHttpCallBack().OnAfterResponse(_context);
                            }

                            //handle errors defined at the API level
                            validateResponse(_response, _context);

                            //extract result from the http response
                            String _result = ((HttpStringResponse)_response).getBody();
                            //let the caller know of the success
                            callBack.onSuccess(_context, _result);
                        } catch (APIException error) {
                            //let the caller know of the error
                            callBack.onFailure(_context, error);
                        } catch (Exception exception) {
                            //let the caller know of the caught Exception
                            callBack.onFailure(_context, exception);
                        }
                    }
                    public void onFailure(HttpContext _context, Throwable _error) {
                        //invoke the callback after response if its not null
                        if (getHttpCallBack() != null)
                        {
                            getHttpCallBack().OnAfterResponse(_context);
                        }

                        //let the caller know of the failure
                        callBack.onFailure(_context, _error);
                    }
                });
            }
        };

        //execute async using thread pool
        APIHelper.getScheduler().execute(_responseTask);
    }

    /**
     * Retrieve a list of Short Code messages.
     * @param    shortcode    Optional parameter: Only list messages sent from this Short Code
     * @param    to    Optional parameter: Only list messages sent to this number
     * @param    dateSent    Optional parameter: Only list messages sent with the specified date
     * @param    page    Optional parameter: The page count to retrieve from the total results in the collection. Page indexing starts at 1.
     * @param    pageSize    Optional parameter: The count of objects to return per page.
     * @return    Returns the String response from the API call 
     */
    public String createListSMS(
                final String shortcode,
                final String to,
                final String dateSent,
                final Integer page,
                final Integer pageSize
    ) throws Throwable {
        APICallBackCatcher<String> callback = new APICallBackCatcher<String>();
        createListSMSAsync(shortcode, to, dateSent, page, pageSize, callback);
        if(!callback.isSuccess())
            throw callback.getError();
        return callback.getResult();
    }

    /**
     * Retrieve a list of Short Code messages.
     * @param    shortcode    Optional parameter: Only list messages sent from this Short Code
     * @param    to    Optional parameter: Only list messages sent to this number
     * @param    dateSent    Optional parameter: Only list messages sent with the specified date
     * @param    page    Optional parameter: The page count to retrieve from the total results in the collection. Page indexing starts at 1.
     * @param    pageSize    Optional parameter: The count of objects to return per page.
     * @return    Returns the void response from the API call 
     */
    public void createListSMSAsync(
                final String shortcode,
                final String to,
                final String dateSent,
                final Integer page,
                final Integer pageSize,
                final APICallBack<String> callBack
    ) {
        Runnable _responseTask = new Runnable() {
            public void run() {
                //the base uri for api requests
                String _baseUri = Configuration.baseUri;

                //prepare query string for API call
                StringBuilder _queryBuilder = new StringBuilder(_baseUri);
                _queryBuilder.append("/shortcode/listsms.json");
                //validate and preprocess url
                String _queryUrl = APIHelper.cleanUrl(_queryBuilder);

                //load all headers for the outgoing API request
                Map<String, String> _headers = new HashMap<String, String>() {
                    private static final long serialVersionUID = 9024873901054908219L;
                    {
                        put( "user-agent", "APIMATIC 2.0" );
                    }
                };

                //load all fields for the outgoing API request
                Map<String, Object> _parameters = new HashMap<String, Object>() {
                    private static final long serialVersionUID = -335755883L;
                    {
                        put( "Shortcode", shortcode );
                        put( "To", to );
                        put( "DateSent", dateSent );
                        put( "Page", page );
                        put( "PageSize", pageSize );
                    }
                };

                //prepare and invoke the API call request to fetch the response
                final HttpRequest _request = getClientInstance().post(_queryUrl, _headers, APIHelper.prepareFormFields(_parameters),
                                                Configuration.basicAuthUserName, Configuration.basicAuthPassword);

                //invoke the callback before request if its not null
                if (getHttpCallBack() != null)
                {
                    getHttpCallBack().OnBeforeRequest(_request);
                }

                //invoke request and get response
                getClientInstance().executeAsStringAsync(_request, new APICallBack<HttpResponse>() {
                    public void onSuccess(HttpContext _context, HttpResponse _response) {
                        try {

                            //invoke the callback after response if its not null
                            if (getHttpCallBack() != null)	
                            {
                                getHttpCallBack().OnAfterResponse(_context);
                            }

                            //handle errors defined at the API level
                            validateResponse(_response, _context);

                            //extract result from the http response
                            String _result = ((HttpStringResponse)_response).getBody();
                            //let the caller know of the success
                            callBack.onSuccess(_context, _result);
                        } catch (APIException error) {
                            //let the caller know of the error
                            callBack.onFailure(_context, error);
                        } catch (Exception exception) {
                            //let the caller know of the caught Exception
                            callBack.onFailure(_context, exception);
                        }
                    }
                    public void onFailure(HttpContext _context, Throwable _error) {
                        //invoke the callback after response if its not null
                        if (getHttpCallBack() != null)
                        {
                            getHttpCallBack().OnAfterResponse(_context);
                        }

                        //let the caller know of the failure
                        callBack.onFailure(_context, _error);
                    }
                });
            }
        };

        //execute async using thread pool
        APIHelper.getScheduler().execute(_responseTask);
    }

    /**
     * Send Dedicated Shortcode
     * @param    shortcode    Required parameter: Your dedicated shortcode
     * @param    to    Required parameter: The number to send your SMS to
     * @param    body    Required parameter: The body of your message
     * @param    method    Optional parameter: Specifies the HTTP method used to request the required URL once the Short Code message is sent.GET or POST
     * @param    messagestatuscallback    Optional parameter: URL that can be requested to receive notification when Short Code message was sent.
     * @return    Returns the String response from the API call 
     */
    public String createSendSMS(
                final int shortcode,
                final double to,
                final String body,
                final String method,
                final String messagestatuscallback
    ) throws Throwable {
        APICallBackCatcher<String> callback = new APICallBackCatcher<String>();
        createSendSMSAsync(shortcode, to, body, method, messagestatuscallback, callback);
        if(!callback.isSuccess())
            throw callback.getError();
        return callback.getResult();
    }

    /**
     * Send Dedicated Shortcode
     * @param    shortcode    Required parameter: Your dedicated shortcode
     * @param    to    Required parameter: The number to send your SMS to
     * @param    body    Required parameter: The body of your message
     * @param    method    Optional parameter: Specifies the HTTP method used to request the required URL once the Short Code message is sent.GET or POST
     * @param    messagestatuscallback    Optional parameter: URL that can be requested to receive notification when Short Code message was sent.
     * @return    Returns the void response from the API call 
     */
    public void createSendSMSAsync(
                final int shortcode,
                final double to,
                final String body,
                final String method,
                final String messagestatuscallback,
                final APICallBack<String> callBack
    ) {
        Runnable _responseTask = new Runnable() {
            public void run() {
                //the base uri for api requests
                String _baseUri = Configuration.baseUri;

                //prepare query string for API call
                StringBuilder _queryBuilder = new StringBuilder(_baseUri);
                _queryBuilder.append("/dedicatedshortcode/sendsms.json");
                //validate and preprocess url
                String _queryUrl = APIHelper.cleanUrl(_queryBuilder);

                //load all headers for the outgoing API request
                Map<String, String> _headers = new HashMap<String, String>() {
                    private static final long serialVersionUID = 9024873901054908219L;
                    {
                        put( "user-agent", "APIMATIC 2.0" );
                    }
                };

                //load all fields for the outgoing API request
                Map<String, Object> _parameters = new HashMap<String, Object>() {
                    private static final long serialVersionUID = -146569740L;
                    {
                        put( "shortcode", shortcode );
                        put( "to", to );
                        put( "body", body );
                        put( "method", method );
                        put( "messagestatuscallback", messagestatuscallback );
                    }
                };

                //prepare and invoke the API call request to fetch the response
                final HttpRequest _request = getClientInstance().post(_queryUrl, _headers, APIHelper.prepareFormFields(_parameters),
                                                Configuration.basicAuthUserName, Configuration.basicAuthPassword);

                //invoke the callback before request if its not null
                if (getHttpCallBack() != null)
                {
                    getHttpCallBack().OnBeforeRequest(_request);
                }

                //invoke request and get response
                getClientInstance().executeAsStringAsync(_request, new APICallBack<HttpResponse>() {
                    public void onSuccess(HttpContext _context, HttpResponse _response) {
                        try {

                            //invoke the callback after response if its not null
                            if (getHttpCallBack() != null)	
                            {
                                getHttpCallBack().OnAfterResponse(_context);
                            }

                            //handle errors defined at the API level
                            validateResponse(_response, _context);

                            //extract result from the http response
                            String _result = ((HttpStringResponse)_response).getBody();
                            //let the caller know of the success
                            callBack.onSuccess(_context, _result);
                        } catch (APIException error) {
                            //let the caller know of the error
                            callBack.onFailure(_context, error);
                        } catch (Exception exception) {
                            //let the caller know of the caught Exception
                            callBack.onFailure(_context, exception);
                        }
                    }
                    public void onFailure(HttpContext _context, Throwable _error) {
                        //invoke the callback after response if its not null
                        if (getHttpCallBack() != null)
                        {
                            getHttpCallBack().OnAfterResponse(_context);
                        }

                        //let the caller know of the failure
                        callBack.onFailure(_context, _error);
                    }
                });
            }
        };

        //execute async using thread pool
        APIHelper.getScheduler().execute(_responseTask);
    }

    /**
     * Retrive a list of inbound Sms Short Code messages associated with your Ytel account.
     * @param    page    Optional parameter: The page count to retrieve from the total results in the collection. Page indexing starts at 1.
     * @param    pagesize    Optional parameter: Number of individual resources listed in the response per page
     * @param    from    Optional parameter: Only list SMS messages sent from this number
     * @param    shortcode    Optional parameter: Only list SMS messages sent to Shortcode
     * @param    datecreated    Optional parameter: Only list SMS messages sent in the specified date MAKE REQUEST
     * @return    Returns the String response from the API call 
     */
    public String createListInboundSMS(
                final Integer page,
                final Integer pagesize,
                final String from,
                final String shortcode,
                final String datecreated
    ) throws Throwable {
        APICallBackCatcher<String> callback = new APICallBackCatcher<String>();
        createListInboundSMSAsync(page, pagesize, from, shortcode, datecreated, callback);
        if(!callback.isSuccess())
            throw callback.getError();
        return callback.getResult();
    }

    /**
     * Retrive a list of inbound Sms Short Code messages associated with your Ytel account.
     * @param    page    Optional parameter: The page count to retrieve from the total results in the collection. Page indexing starts at 1.
     * @param    pagesize    Optional parameter: Number of individual resources listed in the response per page
     * @param    from    Optional parameter: Only list SMS messages sent from this number
     * @param    shortcode    Optional parameter: Only list SMS messages sent to Shortcode
     * @param    datecreated    Optional parameter: Only list SMS messages sent in the specified date MAKE REQUEST
     * @return    Returns the void response from the API call 
     */
    public void createListInboundSMSAsync(
                final Integer page,
                final Integer pagesize,
                final String from,
                final String shortcode,
                final String datecreated,
                final APICallBack<String> callBack
    ) {
        Runnable _responseTask = new Runnable() {
            public void run() {
                //the base uri for api requests
                String _baseUri = Configuration.baseUri;

                //prepare query string for API call
                StringBuilder _queryBuilder = new StringBuilder(_baseUri);
                _queryBuilder.append("/dedicatedshortcode/getinboundsms.json");
                //validate and preprocess url
                String _queryUrl = APIHelper.cleanUrl(_queryBuilder);

                //load all headers for the outgoing API request
                Map<String, String> _headers = new HashMap<String, String>() {
                    private static final long serialVersionUID = 9024873901054908219L;
                    {
                        put( "user-agent", "APIMATIC 2.0" );
                    }
                };

                //load all fields for the outgoing API request
                Map<String, Object> _parameters = new HashMap<String, Object>() {
                    private static final long serialVersionUID = -6532839733165412788L;
                    {
                        put( "page", page );
                        put( "pagesize", pagesize );
                        put( "From", from );
                        put( "Shortcode", shortcode );
                        put( "Datecreated", datecreated );
                    }
                };

                //prepare and invoke the API call request to fetch the response
                final HttpRequest _request = getClientInstance().post(_queryUrl, _headers, APIHelper.prepareFormFields(_parameters),
                                                Configuration.basicAuthUserName, Configuration.basicAuthPassword);

                //invoke the callback before request if its not null
                if (getHttpCallBack() != null)
                {
                    getHttpCallBack().OnBeforeRequest(_request);
                }

                //invoke request and get response
                getClientInstance().executeAsStringAsync(_request, new APICallBack<HttpResponse>() {
                    public void onSuccess(HttpContext _context, HttpResponse _response) {
                        try {

                            //invoke the callback after response if its not null
                            if (getHttpCallBack() != null)	
                            {
                                getHttpCallBack().OnAfterResponse(_context);
                            }

                            //handle errors defined at the API level
                            validateResponse(_response, _context);

                            //extract result from the http response
                            String _result = ((HttpStringResponse)_response).getBody();
                            //let the caller know of the success
                            callBack.onSuccess(_context, _result);
                        } catch (APIException error) {
                            //let the caller know of the error
                            callBack.onFailure(_context, error);
                        } catch (Exception exception) {
                            //let the caller know of the caught Exception
                            callBack.onFailure(_context, exception);
                        }
                    }
                    public void onFailure(HttpContext _context, Throwable _error) {
                        //invoke the callback after response if its not null
                        if (getHttpCallBack() != null)
                        {
                            getHttpCallBack().OnAfterResponse(_context);
                        }

                        //let the caller know of the failure
                        callBack.onFailure(_context, _error);
                    }
                });
            }
        };

        //execute async using thread pool
        APIHelper.getScheduler().execute(_responseTask);
    }

    /**
     * Update a dedicated shortcode.
     * @param    shortcode    Required parameter: List of valid dedicated shortcode to your Ytel account.
     * @param    friendlyName    Optional parameter: User generated name of the dedicated shortcode.
     * @param    callbackMethod    Optional parameter: Specifies the HTTP method used to request the required StatusCallBackUrl once call connects.
     * @param    callbackUrl    Optional parameter: URL that can be requested to receive notification when call has ended. A set of default parameters will be sent here once the call is finished.
     * @param    fallbackMethod    Optional parameter: Specifies the HTTP method used to request the required FallbackUrl once call connects.
     * @param    fallbackUrl    Optional parameter: URL used if any errors occur during execution of InboundXML or at initial request of the required Url provided with the POST.
     * @return    Returns the String response from the API call 
     */
    public String updateShortcode(
                final String shortcode,
                final String friendlyName,
                final String callbackMethod,
                final String callbackUrl,
                final String fallbackMethod,
                final String fallbackUrl
    ) throws Throwable {
        APICallBackCatcher<String> callback = new APICallBackCatcher<String>();
        updateShortcodeAsync(shortcode, friendlyName, callbackMethod, callbackUrl, fallbackMethod, fallbackUrl, callback);
        if(!callback.isSuccess())
            throw callback.getError();
        return callback.getResult();
    }

    /**
     * Update a dedicated shortcode.
     * @param    shortcode    Required parameter: List of valid dedicated shortcode to your Ytel account.
     * @param    friendlyName    Optional parameter: User generated name of the dedicated shortcode.
     * @param    callbackMethod    Optional parameter: Specifies the HTTP method used to request the required StatusCallBackUrl once call connects.
     * @param    callbackUrl    Optional parameter: URL that can be requested to receive notification when call has ended. A set of default parameters will be sent here once the call is finished.
     * @param    fallbackMethod    Optional parameter: Specifies the HTTP method used to request the required FallbackUrl once call connects.
     * @param    fallbackUrl    Optional parameter: URL used if any errors occur during execution of InboundXML or at initial request of the required Url provided with the POST.
     * @return    Returns the void response from the API call 
     */
    public void updateShortcodeAsync(
                final String shortcode,
                final String friendlyName,
                final String callbackMethod,
                final String callbackUrl,
                final String fallbackMethod,
                final String fallbackUrl,
                final APICallBack<String> callBack
    ) {
        Runnable _responseTask = new Runnable() {
            public void run() {
                //the base uri for api requests
                String _baseUri = Configuration.baseUri;

                //prepare query string for API call
                StringBuilder _queryBuilder = new StringBuilder(_baseUri);
                _queryBuilder.append("/dedicatedshortcode/updateshortcode.json");
                //validate and preprocess url
                String _queryUrl = APIHelper.cleanUrl(_queryBuilder);

                //load all headers for the outgoing API request
                Map<String, String> _headers = new HashMap<String, String>() {
                    private static final long serialVersionUID = 9024873901054908219L;
                    {
                        put( "user-agent", "APIMATIC 2.0" );
                    }
                };

                //load all fields for the outgoing API request
                Map<String, Object> _parameters = new HashMap<String, Object>() {
                    private static final long serialVersionUID = -5672732107209064621L;
                    {
                        put( "Shortcode", shortcode );
                        put( "FriendlyName", friendlyName );
                        put( "CallbackMethod", callbackMethod );
                        put( "CallbackUrl", callbackUrl );
                        put( "FallbackMethod", fallbackMethod );
                        put( "FallbackUrl", fallbackUrl );
                    }
                };

                //prepare and invoke the API call request to fetch the response
                final HttpRequest _request = getClientInstance().post(_queryUrl, _headers, APIHelper.prepareFormFields(_parameters),
                                                Configuration.basicAuthUserName, Configuration.basicAuthPassword);

                //invoke the callback before request if its not null
                if (getHttpCallBack() != null)
                {
                    getHttpCallBack().OnBeforeRequest(_request);
                }

                //invoke request and get response
                getClientInstance().executeAsStringAsync(_request, new APICallBack<HttpResponse>() {
                    public void onSuccess(HttpContext _context, HttpResponse _response) {
                        try {

                            //invoke the callback after response if its not null
                            if (getHttpCallBack() != null)	
                            {
                                getHttpCallBack().OnAfterResponse(_context);
                            }

                            //handle errors defined at the API level
                            validateResponse(_response, _context);

                            //extract result from the http response
                            String _result = ((HttpStringResponse)_response).getBody();
                            //let the caller know of the success
                            callBack.onSuccess(_context, _result);
                        } catch (APIException error) {
                            //let the caller know of the error
                            callBack.onFailure(_context, error);
                        } catch (Exception exception) {
                            //let the caller know of the caught Exception
                            callBack.onFailure(_context, exception);
                        }
                    }
                    public void onFailure(HttpContext _context, Throwable _error) {
                        //invoke the callback after response if its not null
                        if (getHttpCallBack() != null)
                        {
                            getHttpCallBack().OnAfterResponse(_context);
                        }

                        //let the caller know of the failure
                        callBack.onFailure(_context, _error);
                    }
                });
            }
        };

        //execute async using thread pool
        APIHelper.getScheduler().execute(_responseTask);
    }

}