/*
 * YtelAPIV3Lib
 *
 * This file was automatically generated by APIMATIC v2.0 ( https://apimatic.io ).
 */
package com.ytel.api.controllers;

import java.io.*;
import java.util.*;
import java.util.concurrent.*;

import com.ytel.api.*;
import com.ytel.api.models.*;
import com.ytel.api.exceptions.*;
import com.ytel.api.http.client.HttpClient;
import com.ytel.api.http.client.HttpContext;
import com.ytel.api.http.request.HttpRequest;
import com.ytel.api.http.response.HttpResponse;
import com.ytel.api.http.response.HttpStringResponse;
import com.ytel.api.http.client.APICallBack;
import com.ytel.api.controllers.syncwrapper.APICallBackCatcher;

public class CallController extends BaseController {    
    //private static variables for the singleton pattern
    private static Object syncObject = new Object();
    private static CallController instance = null;

    /**
     * Singleton pattern implementation 
     * @return The singleton instance of the CallController class 
     */
    public static CallController getInstance() {
        synchronized (syncObject) {
            if (null == instance) {
                instance = new CallController();
            }
        }
        return instance;
    }

    /**
     * Retrieve a single voice call’s information by its CallSid.
     * @param    callSid    Required parameter: The unique identifier for the voice call.
     * @return    Returns the String response from the API call 
     */
    public String createViewCall1(
                final String callSid
    ) throws Throwable {
        APICallBackCatcher<String> callback = new APICallBackCatcher<String>();
        createViewCall1Async(callSid, callback);
        if(!callback.isSuccess())
            throw callback.getError();
        return callback.getResult();
    }

    /**
     * Retrieve a single voice call’s information by its CallSid.
     * @param    callSid    Required parameter: The unique identifier for the voice call.
     * @return    Returns the void response from the API call 
     */
    public void createViewCall1Async(
                final String callSid,
                final APICallBack<String> callBack
    ) {
        Runnable _responseTask = new Runnable() {
            public void run() {
                //the base uri for api requests
                String _baseUri = Configuration.baseUri;

                //prepare query string for API call
                StringBuilder _queryBuilder = new StringBuilder(_baseUri);
                _queryBuilder.append("/calls/viewcalldetail.json");
                //validate and preprocess url
                String _queryUrl = APIHelper.cleanUrl(_queryBuilder);

                //load all headers for the outgoing API request
                Map<String, String> _headers = new HashMap<String, String>() {
                    private static final long serialVersionUID = 9024873901054908219L;
                    {
                        put( "user-agent", "APIMATIC 2.0" );
                    }
                };

                //load all fields for the outgoing API request
                Map<String, Object> _parameters = new HashMap<String, Object>() {
                    private static final long serialVersionUID = -7812171834666666139L;
                    {
                        put( "callSid", callSid );
                    }
                };

                //prepare and invoke the API call request to fetch the response
                final HttpRequest _request = getClientInstance().post(_queryUrl, _headers, APIHelper.prepareFormFields(_parameters),
                                                Configuration.basicAuthUserName, Configuration.basicAuthPassword);

                //invoke the callback before request if its not null
                if (getHttpCallBack() != null)
                {
                    getHttpCallBack().OnBeforeRequest(_request);
                }

                //invoke request and get response
                getClientInstance().executeAsStringAsync(_request, new APICallBack<HttpResponse>() {
                    public void onSuccess(HttpContext _context, HttpResponse _response) {
                        try {

                            //invoke the callback after response if its not null
                            if (getHttpCallBack() != null)	
                            {
                                getHttpCallBack().OnAfterResponse(_context);
                            }

                            //handle errors defined at the API level
                            validateResponse(_response, _context);

                            //extract result from the http response
                            String _result = ((HttpStringResponse)_response).getBody();
                            //let the caller know of the success
                            callBack.onSuccess(_context, _result);
                        } catch (APIException error) {
                            //let the caller know of the error
                            callBack.onFailure(_context, error);
                        } catch (Exception exception) {
                            //let the caller know of the caught Exception
                            callBack.onFailure(_context, exception);
                        }
                    }
                    public void onFailure(HttpContext _context, Throwable _error) {
                        //invoke the callback after response if its not null
                        if (getHttpCallBack() != null)
                        {
                            getHttpCallBack().OnAfterResponse(_context);
                        }

                        //let the caller know of the failure
                        callBack.onFailure(_context, _error);
                    }
                });
            }
        };

        //execute async using thread pool
        APIHelper.getScheduler().execute(_responseTask);
    }

    /**
     * Retrieve a single voice call’s information by its CallSid.
     * @param    callsid    Required parameter: The unique identifier for the voice call.
     * @return    Returns the String response from the API call 
     */
    public String createViewCall(
                final String callsid
    ) throws Throwable {
        APICallBackCatcher<String> callback = new APICallBackCatcher<String>();
        createViewCallAsync(callsid, callback);
        if(!callback.isSuccess())
            throw callback.getError();
        return callback.getResult();
    }

    /**
     * Retrieve a single voice call’s information by its CallSid.
     * @param    callsid    Required parameter: The unique identifier for the voice call.
     * @return    Returns the void response from the API call 
     */
    public void createViewCallAsync(
                final String callsid,
                final APICallBack<String> callBack
    ) {
        Runnable _responseTask = new Runnable() {
            public void run() {
                //the base uri for api requests
                String _baseUri = Configuration.baseUri;

                //prepare query string for API call
                StringBuilder _queryBuilder = new StringBuilder(_baseUri);
                _queryBuilder.append("/calls/viewcalls.json");
                //validate and preprocess url
                String _queryUrl = APIHelper.cleanUrl(_queryBuilder);

                //load all headers for the outgoing API request
                Map<String, String> _headers = new HashMap<String, String>() {
                    private static final long serialVersionUID = 9024873901054908219L;
                    {
                        put( "user-agent", "APIMATIC 2.0" );
                    }
                };

                //load all fields for the outgoing API request
                Map<String, Object> _parameters = new HashMap<String, Object>() {
                    private static final long serialVersionUID = -7812171836036434523L;
                    {
                        put( "callsid", callsid );
                    }
                };

                //prepare and invoke the API call request to fetch the response
                final HttpRequest _request = getClientInstance().post(_queryUrl, _headers, APIHelper.prepareFormFields(_parameters),
                                                Configuration.basicAuthUserName, Configuration.basicAuthPassword);

                //invoke the callback before request if its not null
                if (getHttpCallBack() != null)
                {
                    getHttpCallBack().OnBeforeRequest(_request);
                }

                //invoke request and get response
                getClientInstance().executeAsStringAsync(_request, new APICallBack<HttpResponse>() {
                    public void onSuccess(HttpContext _context, HttpResponse _response) {
                        try {

                            //invoke the callback after response if its not null
                            if (getHttpCallBack() != null)	
                            {
                                getHttpCallBack().OnAfterResponse(_context);
                            }

                            //handle errors defined at the API level
                            validateResponse(_response, _context);

                            //extract result from the http response
                            String _result = ((HttpStringResponse)_response).getBody();
                            //let the caller know of the success
                            callBack.onSuccess(_context, _result);
                        } catch (APIException error) {
                            //let the caller know of the error
                            callBack.onFailure(_context, error);
                        } catch (Exception exception) {
                            //let the caller know of the caught Exception
                            callBack.onFailure(_context, exception);
                        }
                    }
                    public void onFailure(HttpContext _context, Throwable _error) {
                        //invoke the callback after response if its not null
                        if (getHttpCallBack() != null)
                        {
                            getHttpCallBack().OnAfterResponse(_context);
                        }

                        //let the caller know of the failure
                        callBack.onFailure(_context, _error);
                    }
                });
            }
        };

        //execute async using thread pool
        APIHelper.getScheduler().execute(_responseTask);
    }

    /**
     * Play Dtmf and send the Digit
     * @param    callSid    Required parameter: The unique identifier of each call resource
     * @param    playDtmf    Required parameter: DTMF digits to play to the call. 0-9, #, *, W, or w
     * @param    playDtmfDirection    Optional parameter: The leg of the call DTMF digits should be sent to
     * @return    Returns the String response from the API call 
     */
    public String createPlayDTMF(
                final String callSid,
                final String playDtmf,
                final PlayDtmfDirectionEnum playDtmfDirection
    ) throws Throwable {
        APICallBackCatcher<String> callback = new APICallBackCatcher<String>();
        createPlayDTMFAsync(callSid, playDtmf, playDtmfDirection, callback);
        if(!callback.isSuccess())
            throw callback.getError();
        return callback.getResult();
    }

    /**
     * Play Dtmf and send the Digit
     * @param    callSid    Required parameter: The unique identifier of each call resource
     * @param    playDtmf    Required parameter: DTMF digits to play to the call. 0-9, #, *, W, or w
     * @param    playDtmfDirection    Optional parameter: The leg of the call DTMF digits should be sent to
     * @return    Returns the void response from the API call 
     */
    public void createPlayDTMFAsync(
                final String callSid,
                final String playDtmf,
                final PlayDtmfDirectionEnum playDtmfDirection,
                final APICallBack<String> callBack
    ) {
        Runnable _responseTask = new Runnable() {
            public void run() {
                //the base uri for api requests
                String _baseUri = Configuration.baseUri;

                //prepare query string for API call
                StringBuilder _queryBuilder = new StringBuilder(_baseUri);
                _queryBuilder.append("/calls/senddigits.json");
                //validate and preprocess url
                String _queryUrl = APIHelper.cleanUrl(_queryBuilder);

                //load all headers for the outgoing API request
                Map<String, String> _headers = new HashMap<String, String>() {
                    private static final long serialVersionUID = 9024873901054908219L;
                    {
                        put( "user-agent", "APIMATIC 2.0" );
                    }
                };

                //load all fields for the outgoing API request
                Map<String, Object> _parameters = new HashMap<String, Object>() {
                    private static final long serialVersionUID = -1962396752305242299L;
                    {
                        put( "CallSid", callSid );
                        put( "PlayDtmf", playDtmf );
                        put( "PlayDtmfDirection", (playDtmfDirection != null) ? playDtmfDirection.value() : null );
                    }
                };

                //prepare and invoke the API call request to fetch the response
                final HttpRequest _request = getClientInstance().post(_queryUrl, _headers, APIHelper.prepareFormFields(_parameters),
                                                Configuration.basicAuthUserName, Configuration.basicAuthPassword);

                //invoke the callback before request if its not null
                if (getHttpCallBack() != null)
                {
                    getHttpCallBack().OnBeforeRequest(_request);
                }

                //invoke request and get response
                getClientInstance().executeAsStringAsync(_request, new APICallBack<HttpResponse>() {
                    public void onSuccess(HttpContext _context, HttpResponse _response) {
                        try {

                            //invoke the callback after response if its not null
                            if (getHttpCallBack() != null)	
                            {
                                getHttpCallBack().OnAfterResponse(_context);
                            }

                            //handle errors defined at the API level
                            validateResponse(_response, _context);

                            //extract result from the http response
                            String _result = ((HttpStringResponse)_response).getBody();
                            //let the caller know of the success
                            callBack.onSuccess(_context, _result);
                        } catch (APIException error) {
                            //let the caller know of the error
                            callBack.onFailure(_context, error);
                        } catch (Exception exception) {
                            //let the caller know of the caught Exception
                            callBack.onFailure(_context, exception);
                        }
                    }
                    public void onFailure(HttpContext _context, Throwable _error) {
                        //invoke the callback after response if its not null
                        if (getHttpCallBack() != null)
                        {
                            getHttpCallBack().OnAfterResponse(_context);
                        }

                        //let the caller know of the failure
                        callBack.onFailure(_context, _error);
                    }
                });
            }
        };

        //execute async using thread pool
        APIHelper.getScheduler().execute(_responseTask);
    }

    /**
     * You can experiment with initiating a call through Ytel and view the request response generated when doing so and get the response in json
     * @param    from    Required parameter: A valid Ytel Voice enabled number (E.164 format) that will be initiating the phone call.
     * @param    to    Required parameter: To number
     * @param    url    Required parameter: URL requested once the call connects
     * @param    method    Optional parameter: Specifies the HTTP method used to request the required URL once call connects.
     * @param    statusCallBackUrl    Optional parameter: URL that can be requested to receive notification when call has ended. A set of default parameters will be sent here once the call is finished.
     * @param    statusCallBackMethod    Optional parameter: Specifies the HTTP methodlinkclass used to request StatusCallbackUrl.
     * @param    fallBackUrl    Optional parameter: URL requested if the initial Url parameter fails or encounters an error
     * @param    fallBackMethod    Optional parameter: Specifies the HTTP method used to request the required FallbackUrl once call connects.
     * @param    heartBeatUrl    Optional parameter: URL that can be requested every 60 seconds during the call to notify of elapsed tim
     * @param    heartBeatMethod    Optional parameter: Specifies the HTTP method used to request HeartbeatUrl.
     * @param    timeout    Optional parameter: Time (in seconds) Ytel should wait while the call is ringing before canceling the call
     * @param    playDtmf    Optional parameter: DTMF Digits to play to the call once it connects. 0-9, #, or *
     * @param    hideCallerId    Optional parameter: Specifies if the caller id will be hidden
     * @param    record    Optional parameter: Specifies if the call should be recorded
     * @param    recordCallBackUrl    Optional parameter: Recording parameters will be sent here upon completion
     * @param    recordCallBackMethod    Optional parameter: Method used to request the RecordCallback URL.
     * @param    transcribe    Optional parameter: Specifies if the call recording should be transcribed
     * @param    transcribeCallBackUrl    Optional parameter: Transcription parameters will be sent here upon completion
     * @param    ifMachine    Optional parameter: How Ytel should handle the receiving numbers voicemail machine
     * @param    ifMachineUrl    Optional parameter: URL requested when IfMachine=continue
     * @param    ifMachineMethod    Optional parameter: Method used to request the IfMachineUrl.
     * @param    feedback    Optional parameter: Specify if survey should be enable or not
     * @param    surveyId    Optional parameter: The unique identifier for the survey.
     * @return    Returns the String response from the API call 
     */
    public String createMakeCall(
                final String from,
                final String to,
                final String url,
                final String method,
                final String statusCallBackUrl,
                final String statusCallBackMethod,
                final String fallBackUrl,
                final String fallBackMethod,
                final String heartBeatUrl,
                final String heartBeatMethod,
                final Integer timeout,
                final String playDtmf,
                final Boolean hideCallerId,
                final Boolean record,
                final String recordCallBackUrl,
                final String recordCallBackMethod,
                final Boolean transcribe,
                final String transcribeCallBackUrl,
                final IfMachineEnum ifMachine,
                final String ifMachineUrl,
                final String ifMachineMethod,
                final Boolean feedback,
                final String surveyId
    ) throws Throwable {
        APICallBackCatcher<String> callback = new APICallBackCatcher<String>();
        createMakeCallAsync(from, to, url, method, statusCallBackUrl, statusCallBackMethod, fallBackUrl, fallBackMethod, heartBeatUrl, heartBeatMethod, timeout, playDtmf, hideCallerId, record, recordCallBackUrl, recordCallBackMethod, transcribe, transcribeCallBackUrl, ifMachine, ifMachineUrl, ifMachineMethod, feedback, surveyId, callback);
        if(!callback.isSuccess())
            throw callback.getError();
        return callback.getResult();
    }

    /**
     * You can experiment with initiating a call through Ytel and view the request response generated when doing so and get the response in json
     * @param    from    Required parameter: A valid Ytel Voice enabled number (E.164 format) that will be initiating the phone call.
     * @param    to    Required parameter: To number
     * @param    url    Required parameter: URL requested once the call connects
     * @param    method    Optional parameter: Specifies the HTTP method used to request the required URL once call connects.
     * @param    statusCallBackUrl    Optional parameter: URL that can be requested to receive notification when call has ended. A set of default parameters will be sent here once the call is finished.
     * @param    statusCallBackMethod    Optional parameter: Specifies the HTTP methodlinkclass used to request StatusCallbackUrl.
     * @param    fallBackUrl    Optional parameter: URL requested if the initial Url parameter fails or encounters an error
     * @param    fallBackMethod    Optional parameter: Specifies the HTTP method used to request the required FallbackUrl once call connects.
     * @param    heartBeatUrl    Optional parameter: URL that can be requested every 60 seconds during the call to notify of elapsed tim
     * @param    heartBeatMethod    Optional parameter: Specifies the HTTP method used to request HeartbeatUrl.
     * @param    timeout    Optional parameter: Time (in seconds) Ytel should wait while the call is ringing before canceling the call
     * @param    playDtmf    Optional parameter: DTMF Digits to play to the call once it connects. 0-9, #, or *
     * @param    hideCallerId    Optional parameter: Specifies if the caller id will be hidden
     * @param    record    Optional parameter: Specifies if the call should be recorded
     * @param    recordCallBackUrl    Optional parameter: Recording parameters will be sent here upon completion
     * @param    recordCallBackMethod    Optional parameter: Method used to request the RecordCallback URL.
     * @param    transcribe    Optional parameter: Specifies if the call recording should be transcribed
     * @param    transcribeCallBackUrl    Optional parameter: Transcription parameters will be sent here upon completion
     * @param    ifMachine    Optional parameter: How Ytel should handle the receiving numbers voicemail machine
     * @param    ifMachineUrl    Optional parameter: URL requested when IfMachine=continue
     * @param    ifMachineMethod    Optional parameter: Method used to request the IfMachineUrl.
     * @param    feedback    Optional parameter: Specify if survey should be enable or not
     * @param    surveyId    Optional parameter: The unique identifier for the survey.
     * @return    Returns the void response from the API call 
     */
    public void createMakeCallAsync(
                final String from,
                final String to,
                final String url,
                final String method,
                final String statusCallBackUrl,
                final String statusCallBackMethod,
                final String fallBackUrl,
                final String fallBackMethod,
                final String heartBeatUrl,
                final String heartBeatMethod,
                final Integer timeout,
                final String playDtmf,
                final Boolean hideCallerId,
                final Boolean record,
                final String recordCallBackUrl,
                final String recordCallBackMethod,
                final Boolean transcribe,
                final String transcribeCallBackUrl,
                final IfMachineEnum ifMachine,
                final String ifMachineUrl,
                final String ifMachineMethod,
                final Boolean feedback,
                final String surveyId,
                final APICallBack<String> callBack
    ) {
        Runnable _responseTask = new Runnable() {
            public void run() {
                //the base uri for api requests
                String _baseUri = Configuration.baseUri;

                //prepare query string for API call
                StringBuilder _queryBuilder = new StringBuilder(_baseUri);
                _queryBuilder.append("/calls/makecall.json");
                //validate and preprocess url
                String _queryUrl = APIHelper.cleanUrl(_queryBuilder);

                //load all headers for the outgoing API request
                Map<String, String> _headers = new HashMap<String, String>() {
                    private static final long serialVersionUID = 9024873901054908219L;
                    {
                        put( "user-agent", "APIMATIC 2.0" );
                    }
                };

                //load all fields for the outgoing API request
                Map<String, Object> _parameters = new HashMap<String, Object>() {
                    private static final long serialVersionUID = -1635046611L;
                    {
                        put( "From", from );
                        put( "To", to );
                        put( "Url", url );
                        put( "Method", method );
                        put( "StatusCallBackUrl", statusCallBackUrl );
                        put( "StatusCallBackMethod", statusCallBackMethod );
                        put( "FallBackUrl", fallBackUrl );
                        put( "FallBackMethod", fallBackMethod );
                        put( "HeartBeatUrl", heartBeatUrl );
                        put( "HeartBeatMethod", heartBeatMethod );
                        put( "Timeout", timeout );
                        put( "PlayDtmf", playDtmf );
                        put( "HideCallerId", hideCallerId );
                        put( "Record", record );
                        put( "RecordCallBackUrl", recordCallBackUrl );
                        put( "RecordCallBackMethod", recordCallBackMethod );
                        put( "Transcribe", transcribe );
                        put( "TranscribeCallBackUrl", transcribeCallBackUrl );
                        put( "IfMachine", (ifMachine != null) ? ifMachine.value() : null );
                        put( "IfMachineUrl", ifMachineUrl );
                        put( "IfMachineMethod", ifMachineMethod );
                        put( "Feedback", feedback );
                        put( "SurveyId", surveyId );
                    }
                };

                //prepare and invoke the API call request to fetch the response
                final HttpRequest _request = getClientInstance().post(_queryUrl, _headers, APIHelper.prepareFormFields(_parameters),
                                                Configuration.basicAuthUserName, Configuration.basicAuthPassword);

                //invoke the callback before request if its not null
                if (getHttpCallBack() != null)
                {
                    getHttpCallBack().OnBeforeRequest(_request);
                }

                //invoke request and get response
                getClientInstance().executeAsStringAsync(_request, new APICallBack<HttpResponse>() {
                    public void onSuccess(HttpContext _context, HttpResponse _response) {
                        try {

                            //invoke the callback after response if its not null
                            if (getHttpCallBack() != null)	
                            {
                                getHttpCallBack().OnAfterResponse(_context);
                            }

                            //handle errors defined at the API level
                            validateResponse(_response, _context);

                            //extract result from the http response
                            String _result = ((HttpStringResponse)_response).getBody();
                            //let the caller know of the success
                            callBack.onSuccess(_context, _result);
                        } catch (APIException error) {
                            //let the caller know of the error
                            callBack.onFailure(_context, error);
                        } catch (Exception exception) {
                            //let the caller know of the caught Exception
                            callBack.onFailure(_context, exception);
                        }
                    }
                    public void onFailure(HttpContext _context, Throwable _error) {
                        //invoke the callback after response if its not null
                        if (getHttpCallBack() != null)
                        {
                            getHttpCallBack().OnAfterResponse(_context);
                        }

                        //let the caller know of the failure
                        callBack.onFailure(_context, _error);
                    }
                });
            }
        };

        //execute async using thread pool
        APIHelper.getScheduler().execute(_responseTask);
    }

    /**
     * Play Audio from a url
     * @param    callSid    Required parameter: The unique identifier of each call resource
     * @param    audioUrl    Required parameter: URL to sound that should be played. You also can add more than one audio file using semicolons e.g. http://example.com/audio1.mp3;http://example.com/audio2.wav
     * @param    sayText    Required parameter: Valid alphanumeric string that should be played to the In-progress call.
     * @param    length    Optional parameter: Time limit in seconds for audio play back
     * @param    direction    Optional parameter: The leg of the call audio will be played to
     * @param    mix    Optional parameter: If false, all other audio will be muted
     * @return    Returns the String response from the API call 
     */
    public String createPlayAudio(
                final String callSid,
                final String audioUrl,
                final String sayText,
                final Integer length,
                final DirectionEnum direction,
                final Boolean mix
    ) throws Throwable {
        APICallBackCatcher<String> callback = new APICallBackCatcher<String>();
        createPlayAudioAsync(callSid, audioUrl, sayText, length, direction, mix, callback);
        if(!callback.isSuccess())
            throw callback.getError();
        return callback.getResult();
    }

    /**
     * Play Audio from a url
     * @param    callSid    Required parameter: The unique identifier of each call resource
     * @param    audioUrl    Required parameter: URL to sound that should be played. You also can add more than one audio file using semicolons e.g. http://example.com/audio1.mp3;http://example.com/audio2.wav
     * @param    sayText    Required parameter: Valid alphanumeric string that should be played to the In-progress call.
     * @param    length    Optional parameter: Time limit in seconds for audio play back
     * @param    direction    Optional parameter: The leg of the call audio will be played to
     * @param    mix    Optional parameter: If false, all other audio will be muted
     * @return    Returns the void response from the API call 
     */
    public void createPlayAudioAsync(
                final String callSid,
                final String audioUrl,
                final String sayText,
                final Integer length,
                final DirectionEnum direction,
                final Boolean mix,
                final APICallBack<String> callBack
    ) {
        Runnable _responseTask = new Runnable() {
            public void run() {
                //the base uri for api requests
                String _baseUri = Configuration.baseUri;

                //prepare query string for API call
                StringBuilder _queryBuilder = new StringBuilder(_baseUri);
                _queryBuilder.append("/calls/playaudios.json");
                //validate and preprocess url
                String _queryUrl = APIHelper.cleanUrl(_queryBuilder);

                //load all headers for the outgoing API request
                Map<String, String> _headers = new HashMap<String, String>() {
                    private static final long serialVersionUID = 9024873901054908219L;
                    {
                        put( "user-agent", "APIMATIC 2.0" );
                    }
                };

                //load all fields for the outgoing API request
                Map<String, Object> _parameters = new HashMap<String, Object>() {
                    private static final long serialVersionUID = -910156225L;
                    {
                        put( "CallSid", callSid );
                        put( "AudioUrl", audioUrl );
                        put( "SayText", sayText );
                        put( "Length", length );
                        put( "Direction", (direction != null) ? direction.value() : null );
                        put( "Mix", mix );
                    }
                };

                //prepare and invoke the API call request to fetch the response
                final HttpRequest _request = getClientInstance().post(_queryUrl, _headers, APIHelper.prepareFormFields(_parameters),
                                                Configuration.basicAuthUserName, Configuration.basicAuthPassword);

                //invoke the callback before request if its not null
                if (getHttpCallBack() != null)
                {
                    getHttpCallBack().OnBeforeRequest(_request);
                }

                //invoke request and get response
                getClientInstance().executeAsStringAsync(_request, new APICallBack<HttpResponse>() {
                    public void onSuccess(HttpContext _context, HttpResponse _response) {
                        try {

                            //invoke the callback after response if its not null
                            if (getHttpCallBack() != null)	
                            {
                                getHttpCallBack().OnAfterResponse(_context);
                            }

                            //handle errors defined at the API level
                            validateResponse(_response, _context);

                            //extract result from the http response
                            String _result = ((HttpStringResponse)_response).getBody();
                            //let the caller know of the success
                            callBack.onSuccess(_context, _result);
                        } catch (APIException error) {
                            //let the caller know of the error
                            callBack.onFailure(_context, error);
                        } catch (Exception exception) {
                            //let the caller know of the caught Exception
                            callBack.onFailure(_context, exception);
                        }
                    }
                    public void onFailure(HttpContext _context, Throwable _error) {
                        //invoke the callback after response if its not null
                        if (getHttpCallBack() != null)
                        {
                            getHttpCallBack().OnAfterResponse(_context);
                        }

                        //let the caller know of the failure
                        callBack.onFailure(_context, _error);
                    }
                });
            }
        };

        //execute async using thread pool
        APIHelper.getScheduler().execute(_responseTask);
    }

    /**
     * Start or stop recording of an in-progress voice call.
     * @param    callSid    Required parameter: The unique identifier of each call resource
     * @param    record    Required parameter: Set true to initiate recording or false to terminate recording
     * @param    direction    Optional parameter: The leg of the call to record
     * @param    timeLimit    Optional parameter: Time in seconds the recording duration should not exceed
     * @param    callBackUrl    Optional parameter: URL consulted after the recording completes
     * @param    fileformat    Optional parameter: Format of the recording file. Can be .mp3 or .wav
     * @return    Returns the String response from the API call 
     */
    public String createRecordCall(
                final String callSid,
                final boolean record,
                final Direction4Enum direction,
                final Integer timeLimit,
                final String callBackUrl,
                final FileformatEnum fileformat
    ) throws Throwable {
        APICallBackCatcher<String> callback = new APICallBackCatcher<String>();
        createRecordCallAsync(callSid, record, direction, timeLimit, callBackUrl, fileformat, callback);
        if(!callback.isSuccess())
            throw callback.getError();
        return callback.getResult();
    }

    /**
     * Start or stop recording of an in-progress voice call.
     * @param    callSid    Required parameter: The unique identifier of each call resource
     * @param    record    Required parameter: Set true to initiate recording or false to terminate recording
     * @param    direction    Optional parameter: The leg of the call to record
     * @param    timeLimit    Optional parameter: Time in seconds the recording duration should not exceed
     * @param    callBackUrl    Optional parameter: URL consulted after the recording completes
     * @param    fileformat    Optional parameter: Format of the recording file. Can be .mp3 or .wav
     * @return    Returns the void response from the API call 
     */
    public void createRecordCallAsync(
                final String callSid,
                final boolean record,
                final Direction4Enum direction,
                final Integer timeLimit,
                final String callBackUrl,
                final FileformatEnum fileformat,
                final APICallBack<String> callBack
    ) {
        Runnable _responseTask = new Runnable() {
            public void run() {
                //the base uri for api requests
                String _baseUri = Configuration.baseUri;

                //prepare query string for API call
                StringBuilder _queryBuilder = new StringBuilder(_baseUri);
                _queryBuilder.append("/calls/recordcalls.json");
                //validate and preprocess url
                String _queryUrl = APIHelper.cleanUrl(_queryBuilder);

                //load all headers for the outgoing API request
                Map<String, String> _headers = new HashMap<String, String>() {
                    private static final long serialVersionUID = 9024873901054908219L;
                    {
                        put( "user-agent", "APIMATIC 2.0" );
                    }
                };

                //load all fields for the outgoing API request
                Map<String, Object> _parameters = new HashMap<String, Object>() {
                    private static final long serialVersionUID = -7434774536618226284L;
                    {
                        put( "CallSid", callSid );
                        put( "Record", record );
                        put( "Direction", (direction != null) ? direction.value() : null );
                        put( "TimeLimit", timeLimit );
                        put( "CallBackUrl", callBackUrl );
                        put( "Fileformat", (fileformat != null) ? fileformat.value() : null );
                    }
                };

                //prepare and invoke the API call request to fetch the response
                final HttpRequest _request = getClientInstance().post(_queryUrl, _headers, APIHelper.prepareFormFields(_parameters),
                                                Configuration.basicAuthUserName, Configuration.basicAuthPassword);

                //invoke the callback before request if its not null
                if (getHttpCallBack() != null)
                {
                    getHttpCallBack().OnBeforeRequest(_request);
                }

                //invoke request and get response
                getClientInstance().executeAsStringAsync(_request, new APICallBack<HttpResponse>() {
                    public void onSuccess(HttpContext _context, HttpResponse _response) {
                        try {

                            //invoke the callback after response if its not null
                            if (getHttpCallBack() != null)	
                            {
                                getHttpCallBack().OnAfterResponse(_context);
                            }

                            //handle errors defined at the API level
                            validateResponse(_response, _context);

                            //extract result from the http response
                            String _result = ((HttpStringResponse)_response).getBody();
                            //let the caller know of the success
                            callBack.onSuccess(_context, _result);
                        } catch (APIException error) {
                            //let the caller know of the error
                            callBack.onFailure(_context, error);
                        } catch (Exception exception) {
                            //let the caller know of the caught Exception
                            callBack.onFailure(_context, exception);
                        }
                    }
                    public void onFailure(HttpContext _context, Throwable _error) {
                        //invoke the callback after response if its not null
                        if (getHttpCallBack() != null)
                        {
                            getHttpCallBack().OnAfterResponse(_context);
                        }

                        //let the caller know of the failure
                        callBack.onFailure(_context, _error);
                    }
                });
            }
        };

        //execute async using thread pool
        APIHelper.getScheduler().execute(_responseTask);
    }

    /**
     * Add audio voice effects to the an in-progress voice call.
     * @param    callSid    Required parameter: The unique identifier for the in-progress voice call.
     * @param    audioDirection    Optional parameter: The direction the audio effect should be placed on. If IN, the effects will occur on the incoming audio stream. If OUT, the effects will occur on the outgoing audio stream.
     * @param    pitchSemiTones    Optional parameter: Set the pitch in semitone (half-step) intervals. Value between -14 and 14
     * @param    pitchOctaves    Optional parameter: Set the pitch in octave intervals.. Value between -1 and 1
     * @param    pitch    Optional parameter: Set the pitch (lowness/highness) of the audio. The higher the value, the higher the pitch. Value greater than 0
     * @param    rate    Optional parameter: Set the rate for audio. The lower the value, the lower the rate. value greater than 0
     * @param    tempo    Optional parameter: Set the tempo (speed) of the audio. A higher value denotes a faster tempo. Value greater than 0
     * @return    Returns the String response from the API call 
     */
    public String createVoiceEffect(
                final String callSid,
                final AudioDirectionEnum audioDirection,
                final Double pitchSemiTones,
                final Double pitchOctaves,
                final Double pitch,
                final Double rate,
                final Double tempo
    ) throws Throwable {
        APICallBackCatcher<String> callback = new APICallBackCatcher<String>();
        createVoiceEffectAsync(callSid, audioDirection, pitchSemiTones, pitchOctaves, pitch, rate, tempo, callback);
        if(!callback.isSuccess())
            throw callback.getError();
        return callback.getResult();
    }

    /**
     * Add audio voice effects to the an in-progress voice call.
     * @param    callSid    Required parameter: The unique identifier for the in-progress voice call.
     * @param    audioDirection    Optional parameter: The direction the audio effect should be placed on. If IN, the effects will occur on the incoming audio stream. If OUT, the effects will occur on the outgoing audio stream.
     * @param    pitchSemiTones    Optional parameter: Set the pitch in semitone (half-step) intervals. Value between -14 and 14
     * @param    pitchOctaves    Optional parameter: Set the pitch in octave intervals.. Value between -1 and 1
     * @param    pitch    Optional parameter: Set the pitch (lowness/highness) of the audio. The higher the value, the higher the pitch. Value greater than 0
     * @param    rate    Optional parameter: Set the rate for audio. The lower the value, the lower the rate. value greater than 0
     * @param    tempo    Optional parameter: Set the tempo (speed) of the audio. A higher value denotes a faster tempo. Value greater than 0
     * @return    Returns the void response from the API call 
     */
    public void createVoiceEffectAsync(
                final String callSid,
                final AudioDirectionEnum audioDirection,
                final Double pitchSemiTones,
                final Double pitchOctaves,
                final Double pitch,
                final Double rate,
                final Double tempo,
                final APICallBack<String> callBack
    ) {
        Runnable _responseTask = new Runnable() {
            public void run() {
                //the base uri for api requests
                String _baseUri = Configuration.baseUri;

                //prepare query string for API call
                StringBuilder _queryBuilder = new StringBuilder(_baseUri);
                _queryBuilder.append("/calls/voiceeffect.json");
                //validate and preprocess url
                String _queryUrl = APIHelper.cleanUrl(_queryBuilder);

                //load all headers for the outgoing API request
                Map<String, String> _headers = new HashMap<String, String>() {
                    private static final long serialVersionUID = 9024873901054908219L;
                    {
                        put( "user-agent", "APIMATIC 2.0" );
                    }
                };

                //load all fields for the outgoing API request
                Map<String, Object> _parameters = new HashMap<String, Object>() {
                    private static final long serialVersionUID = -8965443813828023631L;
                    {
                        put( "CallSid", callSid );
                        put( "AudioDirection", (audioDirection != null) ? audioDirection.value() : null );
                        put( "PitchSemiTones", pitchSemiTones );
                        put( "PitchOctaves", pitchOctaves );
                        put( "Pitch", pitch );
                        put( "Rate", rate );
                        put( "Tempo", tempo );
                    }
                };

                //prepare and invoke the API call request to fetch the response
                final HttpRequest _request = getClientInstance().post(_queryUrl, _headers, APIHelper.prepareFormFields(_parameters),
                                                Configuration.basicAuthUserName, Configuration.basicAuthPassword);

                //invoke the callback before request if its not null
                if (getHttpCallBack() != null)
                {
                    getHttpCallBack().OnBeforeRequest(_request);
                }

                //invoke request and get response
                getClientInstance().executeAsStringAsync(_request, new APICallBack<HttpResponse>() {
                    public void onSuccess(HttpContext _context, HttpResponse _response) {
                        try {

                            //invoke the callback after response if its not null
                            if (getHttpCallBack() != null)	
                            {
                                getHttpCallBack().OnAfterResponse(_context);
                            }

                            //handle errors defined at the API level
                            validateResponse(_response, _context);

                            //extract result from the http response
                            String _result = ((HttpStringResponse)_response).getBody();
                            //let the caller know of the success
                            callBack.onSuccess(_context, _result);
                        } catch (APIException error) {
                            //let the caller know of the error
                            callBack.onFailure(_context, error);
                        } catch (Exception exception) {
                            //let the caller know of the caught Exception
                            callBack.onFailure(_context, exception);
                        }
                    }
                    public void onFailure(HttpContext _context, Throwable _error) {
                        //invoke the callback after response if its not null
                        if (getHttpCallBack() != null)
                        {
                            getHttpCallBack().OnAfterResponse(_context);
                        }

                        //let the caller know of the failure
                        callBack.onFailure(_context, _error);
                    }
                });
            }
        };

        //execute async using thread pool
        APIHelper.getScheduler().execute(_responseTask);
    }

    /**
     * Interrupt the Call by Call Sid
     * @param    callSid    Required parameter: The unique identifier for voice call that is in progress.
     * @param    url    Optional parameter: URL the in-progress call will be redirected to
     * @param    method    Optional parameter: The method used to request the above Url parameter
     * @param    status    Optional parameter: Status to set the in-progress call to
     * @return    Returns the String response from the API call 
     */
    public String createInterruptCall(
                final String callSid,
                final String url,
                final String method,
                final StatusEnum status
    ) throws Throwable {
        APICallBackCatcher<String> callback = new APICallBackCatcher<String>();
        createInterruptCallAsync(callSid, url, method, status, callback);
        if(!callback.isSuccess())
            throw callback.getError();
        return callback.getResult();
    }

    /**
     * Interrupt the Call by Call Sid
     * @param    callSid    Required parameter: The unique identifier for voice call that is in progress.
     * @param    url    Optional parameter: URL the in-progress call will be redirected to
     * @param    method    Optional parameter: The method used to request the above Url parameter
     * @param    status    Optional parameter: Status to set the in-progress call to
     * @return    Returns the void response from the API call 
     */
    public void createInterruptCallAsync(
                final String callSid,
                final String url,
                final String method,
                final StatusEnum status,
                final APICallBack<String> callBack
    ) {
        Runnable _responseTask = new Runnable() {
            public void run() {
                //the base uri for api requests
                String _baseUri = Configuration.baseUri;

                //prepare query string for API call
                StringBuilder _queryBuilder = new StringBuilder(_baseUri);
                _queryBuilder.append("/calls/interruptcalls.json");
                //validate and preprocess url
                String _queryUrl = APIHelper.cleanUrl(_queryBuilder);

                //load all headers for the outgoing API request
                Map<String, String> _headers = new HashMap<String, String>() {
                    private static final long serialVersionUID = 9024873901054908219L;
                    {
                        put( "user-agent", "APIMATIC 2.0" );
                    }
                };

                //load all fields for the outgoing API request
                Map<String, Object> _parameters = new HashMap<String, Object>() {
                    private static final long serialVersionUID = -512711856L;
                    {
                        put( "CallSid", callSid );
                        put( "Url", url );
                        put( "Method", method );
                        put( "Status", (status != null) ? status.value() : null );
                    }
                };

                //prepare and invoke the API call request to fetch the response
                final HttpRequest _request = getClientInstance().post(_queryUrl, _headers, APIHelper.prepareFormFields(_parameters),
                                                Configuration.basicAuthUserName, Configuration.basicAuthPassword);

                //invoke the callback before request if its not null
                if (getHttpCallBack() != null)
                {
                    getHttpCallBack().OnBeforeRequest(_request);
                }

                //invoke request and get response
                getClientInstance().executeAsStringAsync(_request, new APICallBack<HttpResponse>() {
                    public void onSuccess(HttpContext _context, HttpResponse _response) {
                        try {

                            //invoke the callback after response if its not null
                            if (getHttpCallBack() != null)	
                            {
                                getHttpCallBack().OnAfterResponse(_context);
                            }

                            //handle errors defined at the API level
                            validateResponse(_response, _context);

                            //extract result from the http response
                            String _result = ((HttpStringResponse)_response).getBody();
                            //let the caller know of the success
                            callBack.onSuccess(_context, _result);
                        } catch (APIException error) {
                            //let the caller know of the error
                            callBack.onFailure(_context, error);
                        } catch (Exception exception) {
                            //let the caller know of the caught Exception
                            callBack.onFailure(_context, exception);
                        }
                    }
                    public void onFailure(HttpContext _context, Throwable _error) {
                        //invoke the callback after response if its not null
                        if (getHttpCallBack() != null)
                        {
                            getHttpCallBack().OnAfterResponse(_context);
                        }

                        //let the caller know of the failure
                        callBack.onFailure(_context, _error);
                    }
                });
            }
        };

        //execute async using thread pool
        APIHelper.getScheduler().execute(_responseTask);
    }

    /**
     * A list of calls associated with your Ytel account
     * @param    page    Optional parameter: The page count to retrieve from the total results in the collection. Page indexing starts at 1.
     * @param    pageSize    Optional parameter: Number of individual resources listed in the response per page
     * @param    to    Optional parameter: Filter calls that were sent to this 10-digit number (E.164 format).
     * @param    from    Optional parameter: Filter calls that were sent from this 10-digit number (E.164 format).
     * @param    dateCreated    Optional parameter: Return calls that are from a specified date.
     * @return    Returns the String response from the API call 
     */
    public String createListCalls(
                final Integer page,
                final Integer pageSize,
                final String to,
                final String from,
                final String dateCreated
    ) throws Throwable {
        APICallBackCatcher<String> callback = new APICallBackCatcher<String>();
        createListCallsAsync(page, pageSize, to, from, dateCreated, callback);
        if(!callback.isSuccess())
            throw callback.getError();
        return callback.getResult();
    }

    /**
     * A list of calls associated with your Ytel account
     * @param    page    Optional parameter: The page count to retrieve from the total results in the collection. Page indexing starts at 1.
     * @param    pageSize    Optional parameter: Number of individual resources listed in the response per page
     * @param    to    Optional parameter: Filter calls that were sent to this 10-digit number (E.164 format).
     * @param    from    Optional parameter: Filter calls that were sent from this 10-digit number (E.164 format).
     * @param    dateCreated    Optional parameter: Return calls that are from a specified date.
     * @return    Returns the void response from the API call 
     */
    public void createListCallsAsync(
                final Integer page,
                final Integer pageSize,
                final String to,
                final String from,
                final String dateCreated,
                final APICallBack<String> callBack
    ) {
        Runnable _responseTask = new Runnable() {
            public void run() {
                //the base uri for api requests
                String _baseUri = Configuration.baseUri;

                //prepare query string for API call
                StringBuilder _queryBuilder = new StringBuilder(_baseUri);
                _queryBuilder.append("/calls/listcalls.json");
                //validate and preprocess url
                String _queryUrl = APIHelper.cleanUrl(_queryBuilder);

                //load all headers for the outgoing API request
                Map<String, String> _headers = new HashMap<String, String>() {
                    private static final long serialVersionUID = 9024873901054908219L;
                    {
                        put( "user-agent", "APIMATIC 2.0" );
                    }
                };

                //load all fields for the outgoing API request
                Map<String, Object> _parameters = new HashMap<String, Object>() {
                    private static final long serialVersionUID = -984230905L;
                    {
                        put( "Page", page );
                        put( "PageSize", pageSize );
                        put( "To", to );
                        put( "From", from );
                        put( "DateCreated", dateCreated );
                    }
                };

                //prepare and invoke the API call request to fetch the response
                final HttpRequest _request = getClientInstance().post(_queryUrl, _headers, APIHelper.prepareFormFields(_parameters),
                                                Configuration.basicAuthUserName, Configuration.basicAuthPassword);

                //invoke the callback before request if its not null
                if (getHttpCallBack() != null)
                {
                    getHttpCallBack().OnBeforeRequest(_request);
                }

                //invoke request and get response
                getClientInstance().executeAsStringAsync(_request, new APICallBack<HttpResponse>() {
                    public void onSuccess(HttpContext _context, HttpResponse _response) {
                        try {

                            //invoke the callback after response if its not null
                            if (getHttpCallBack() != null)	
                            {
                                getHttpCallBack().OnAfterResponse(_context);
                            }

                            //handle errors defined at the API level
                            validateResponse(_response, _context);

                            //extract result from the http response
                            String _result = ((HttpStringResponse)_response).getBody();
                            //let the caller know of the success
                            callBack.onSuccess(_context, _result);
                        } catch (APIException error) {
                            //let the caller know of the error
                            callBack.onFailure(_context, error);
                        } catch (Exception exception) {
                            //let the caller know of the caught Exception
                            callBack.onFailure(_context, exception);
                        }
                    }
                    public void onFailure(HttpContext _context, Throwable _error) {
                        //invoke the callback after response if its not null
                        if (getHttpCallBack() != null)
                        {
                            getHttpCallBack().OnAfterResponse(_context);
                        }

                        //let the caller know of the failure
                        callBack.onFailure(_context, _error);
                    }
                });
            }
        };

        //execute async using thread pool
        APIHelper.getScheduler().execute(_responseTask);
    }

    /**
     * Initiate an outbound Ringless Voicemail through Ytel.
     * @param    from    Required parameter: A valid Ytel Voice enabled number (E.164 format) that will be initiating the phone call.
     * @param    rVMCallerId    Required parameter: A required secondary Caller ID for RVM to work.
     * @param    to    Required parameter: A valid number (E.164 format) that will receive the phone call.
     * @param    voiceMailURL    Required parameter: The URL requested once the RVM connects. A set of default parameters will be sent here.
     * @param    method    Optional parameter: Specifies the HTTP method used to request the required URL once call connects.
     * @param    statusCallBackUrl    Optional parameter: URL that can be requested to receive notification when call has ended. A set of default parameters will be sent here once the call is finished.
     * @param    statsCallBackMethod    Optional parameter: Specifies the HTTP method used to request the required StatusCallBackUrl once call connects.
     * @return    Returns the String response from the API call 
     */
    public String createSendRVM(
                final String from,
                final String rVMCallerId,
                final String to,
                final String voiceMailURL,
                final String method,
                final String statusCallBackUrl,
                final String statsCallBackMethod
    ) throws Throwable {
        APICallBackCatcher<String> callback = new APICallBackCatcher<String>();
        createSendRVMAsync(from, rVMCallerId, to, voiceMailURL, method, statusCallBackUrl, statsCallBackMethod, callback);
        if(!callback.isSuccess())
            throw callback.getError();
        return callback.getResult();
    }

    /**
     * Initiate an outbound Ringless Voicemail through Ytel.
     * @param    from    Required parameter: A valid Ytel Voice enabled number (E.164 format) that will be initiating the phone call.
     * @param    rVMCallerId    Required parameter: A required secondary Caller ID for RVM to work.
     * @param    to    Required parameter: A valid number (E.164 format) that will receive the phone call.
     * @param    voiceMailURL    Required parameter: The URL requested once the RVM connects. A set of default parameters will be sent here.
     * @param    method    Optional parameter: Specifies the HTTP method used to request the required URL once call connects.
     * @param    statusCallBackUrl    Optional parameter: URL that can be requested to receive notification when call has ended. A set of default parameters will be sent here once the call is finished.
     * @param    statsCallBackMethod    Optional parameter: Specifies the HTTP method used to request the required StatusCallBackUrl once call connects.
     * @return    Returns the void response from the API call 
     */
    public void createSendRVMAsync(
                final String from,
                final String rVMCallerId,
                final String to,
                final String voiceMailURL,
                final String method,
                final String statusCallBackUrl,
                final String statsCallBackMethod,
                final APICallBack<String> callBack
    ) {
        Runnable _responseTask = new Runnable() {
            public void run() {
                //the base uri for api requests
                String _baseUri = Configuration.baseUri;

                //prepare query string for API call
                StringBuilder _queryBuilder = new StringBuilder(_baseUri);
                _queryBuilder.append("/calls/makervm.json");
                //validate and preprocess url
                String _queryUrl = APIHelper.cleanUrl(_queryBuilder);

                //load all headers for the outgoing API request
                Map<String, String> _headers = new HashMap<String, String>() {
                    private static final long serialVersionUID = 9024873901054908219L;
                    {
                        put( "user-agent", "APIMATIC 2.0" );
                    }
                };

                //load all fields for the outgoing API request
                Map<String, Object> _parameters = new HashMap<String, Object>() {
                    private static final long serialVersionUID = -386819315L;
                    {
                        put( "From", from );
                        put( "RVMCallerId", rVMCallerId );
                        put( "To", to );
                        put( "VoiceMailURL", voiceMailURL );
                        put( "Method", method );
                        put( "StatusCallBackUrl", statusCallBackUrl );
                        put( "StatsCallBackMethod", statsCallBackMethod );
                    }
                };

                //prepare and invoke the API call request to fetch the response
                final HttpRequest _request = getClientInstance().post(_queryUrl, _headers, APIHelper.prepareFormFields(_parameters),
                                                Configuration.basicAuthUserName, Configuration.basicAuthPassword);

                //invoke the callback before request if its not null
                if (getHttpCallBack() != null)
                {
                    getHttpCallBack().OnBeforeRequest(_request);
                }

                //invoke request and get response
                getClientInstance().executeAsStringAsync(_request, new APICallBack<HttpResponse>() {
                    public void onSuccess(HttpContext _context, HttpResponse _response) {
                        try {

                            //invoke the callback after response if its not null
                            if (getHttpCallBack() != null)	
                            {
                                getHttpCallBack().OnAfterResponse(_context);
                            }

                            //handle errors defined at the API level
                            validateResponse(_response, _context);

                            //extract result from the http response
                            String _result = ((HttpStringResponse)_response).getBody();
                            //let the caller know of the success
                            callBack.onSuccess(_context, _result);
                        } catch (APIException error) {
                            //let the caller know of the error
                            callBack.onFailure(_context, error);
                        } catch (Exception exception) {
                            //let the caller know of the caught Exception
                            callBack.onFailure(_context, exception);
                        }
                    }
                    public void onFailure(HttpContext _context, Throwable _error) {
                        //invoke the callback after response if its not null
                        if (getHttpCallBack() != null)
                        {
                            getHttpCallBack().OnAfterResponse(_context);
                        }

                        //let the caller know of the failure
                        callBack.onFailure(_context, _error);
                    }
                });
            }
        };

        //execute async using thread pool
        APIHelper.getScheduler().execute(_responseTask);
    }

    /**
     * Group Call
     * @param    from    Required parameter: This number to display on Caller ID as calling
     * @param    to    Required parameter: Please enter multiple E164 number. You can add max 10 numbers. Add numbers separated with comma. e.g : 1111111111,2222222222
     * @param    url    Required parameter: URL requested once the call connects
     * @param    groupConfirmKey    Required parameter: Define the DTMF that the called party should send to bridge the call. Allowed Values : 0-9, #, *
     * @param    groupConfirmFile    Required parameter: Specify the audio file you want to play when the called party picks up the call
     * @param    method    Optional parameter: Specifies the HTTP method used to request the required URL once call connects.
     * @param    statusCallBackUrl    Optional parameter: URL that can be requested to receive notification when call has ended. A set of default parameters will be sent here once the call is finished.
     * @param    statusCallBackMethod    Optional parameter: Specifies the HTTP methodlinkclass used to request StatusCallbackUrl.
     * @param    fallBackUrl    Optional parameter: URL requested if the initial Url parameter fails or encounters an error
     * @param    fallBackMethod    Optional parameter: Specifies the HTTP method used to request the required FallbackUrl once call connects.
     * @param    heartBeatUrl    Optional parameter: URL that can be requested every 60 seconds during the call to notify of elapsed time and pass other general information.
     * @param    heartBeatMethod    Optional parameter: Specifies the HTTP method used to request HeartbeatUrl.
     * @param    timeout    Optional parameter: Time (in seconds) we should wait while the call is ringing before canceling the call
     * @param    playDtmf    Optional parameter: DTMF Digits to play to the call once it connects. 0-9, #, or *
     * @param    hideCallerId    Optional parameter: Specifies if the caller id will be hidden
     * @param    record    Optional parameter: Specifies if the call should be recorded
     * @param    recordCallBackUrl    Optional parameter: Recording parameters will be sent here upon completion
     * @param    recordCallBackMethod    Optional parameter: Method used to request the RecordCallback URL.
     * @param    transcribe    Optional parameter: Specifies if the call recording should be transcribed
     * @param    transcribeCallBackUrl    Optional parameter: Transcription parameters will be sent here upon completion
     * @return    Returns the String response from the API call 
     */
    public String createGroupCall(
                final String from,
                final String to,
                final String url,
                final String groupConfirmKey,
                final GroupConfirmFileEnum groupConfirmFile,
                final String method,
                final String statusCallBackUrl,
                final String statusCallBackMethod,
                final String fallBackUrl,
                final String fallBackMethod,
                final String heartBeatUrl,
                final String heartBeatMethod,
                final Integer timeout,
                final String playDtmf,
                final String hideCallerId,
                final Boolean record,
                final String recordCallBackUrl,
                final String recordCallBackMethod,
                final Boolean transcribe,
                final String transcribeCallBackUrl
    ) throws Throwable {
        APICallBackCatcher<String> callback = new APICallBackCatcher<String>();
        createGroupCallAsync(from, to, url, groupConfirmKey, groupConfirmFile, method, statusCallBackUrl, statusCallBackMethod, fallBackUrl, fallBackMethod, heartBeatUrl, heartBeatMethod, timeout, playDtmf, hideCallerId, record, recordCallBackUrl, recordCallBackMethod, transcribe, transcribeCallBackUrl, callback);
        if(!callback.isSuccess())
            throw callback.getError();
        return callback.getResult();
    }

    /**
     * Group Call
     * @param    from    Required parameter: This number to display on Caller ID as calling
     * @param    to    Required parameter: Please enter multiple E164 number. You can add max 10 numbers. Add numbers separated with comma. e.g : 1111111111,2222222222
     * @param    url    Required parameter: URL requested once the call connects
     * @param    groupConfirmKey    Required parameter: Define the DTMF that the called party should send to bridge the call. Allowed Values : 0-9, #, *
     * @param    groupConfirmFile    Required parameter: Specify the audio file you want to play when the called party picks up the call
     * @param    method    Optional parameter: Specifies the HTTP method used to request the required URL once call connects.
     * @param    statusCallBackUrl    Optional parameter: URL that can be requested to receive notification when call has ended. A set of default parameters will be sent here once the call is finished.
     * @param    statusCallBackMethod    Optional parameter: Specifies the HTTP methodlinkclass used to request StatusCallbackUrl.
     * @param    fallBackUrl    Optional parameter: URL requested if the initial Url parameter fails or encounters an error
     * @param    fallBackMethod    Optional parameter: Specifies the HTTP method used to request the required FallbackUrl once call connects.
     * @param    heartBeatUrl    Optional parameter: URL that can be requested every 60 seconds during the call to notify of elapsed time and pass other general information.
     * @param    heartBeatMethod    Optional parameter: Specifies the HTTP method used to request HeartbeatUrl.
     * @param    timeout    Optional parameter: Time (in seconds) we should wait while the call is ringing before canceling the call
     * @param    playDtmf    Optional parameter: DTMF Digits to play to the call once it connects. 0-9, #, or *
     * @param    hideCallerId    Optional parameter: Specifies if the caller id will be hidden
     * @param    record    Optional parameter: Specifies if the call should be recorded
     * @param    recordCallBackUrl    Optional parameter: Recording parameters will be sent here upon completion
     * @param    recordCallBackMethod    Optional parameter: Method used to request the RecordCallback URL.
     * @param    transcribe    Optional parameter: Specifies if the call recording should be transcribed
     * @param    transcribeCallBackUrl    Optional parameter: Transcription parameters will be sent here upon completion
     * @return    Returns the void response from the API call 
     */
    public void createGroupCallAsync(
                final String from,
                final String to,
                final String url,
                final String groupConfirmKey,
                final GroupConfirmFileEnum groupConfirmFile,
                final String method,
                final String statusCallBackUrl,
                final String statusCallBackMethod,
                final String fallBackUrl,
                final String fallBackMethod,
                final String heartBeatUrl,
                final String heartBeatMethod,
                final Integer timeout,
                final String playDtmf,
                final String hideCallerId,
                final Boolean record,
                final String recordCallBackUrl,
                final String recordCallBackMethod,
                final Boolean transcribe,
                final String transcribeCallBackUrl,
                final APICallBack<String> callBack
    ) {
        Runnable _responseTask = new Runnable() {
            public void run() {
                //the base uri for api requests
                String _baseUri = Configuration.baseUri;

                //prepare query string for API call
                StringBuilder _queryBuilder = new StringBuilder(_baseUri);
                _queryBuilder.append("/calls/groupcall.json");
                //validate and preprocess url
                String _queryUrl = APIHelper.cleanUrl(_queryBuilder);

                //load all headers for the outgoing API request
                Map<String, String> _headers = new HashMap<String, String>() {
                    private static final long serialVersionUID = 9024873901054908219L;
                    {
                        put( "user-agent", "APIMATIC 2.0" );
                    }
                };

                //load all fields for the outgoing API request
                Map<String, Object> _parameters = new HashMap<String, Object>() {
                    private static final long serialVersionUID = -8864968817863643795L;
                    {
                        put( "From", from );
                        put( "To", to );
                        put( "Url", url );
                        put( "GroupConfirmKey", groupConfirmKey );
                        put( "GroupConfirmFile", (groupConfirmFile != null) ? groupConfirmFile.value() : null );
                        put( "Method", method );
                        put( "StatusCallBackUrl", statusCallBackUrl );
                        put( "StatusCallBackMethod", statusCallBackMethod );
                        put( "FallBackUrl", fallBackUrl );
                        put( "FallBackMethod", fallBackMethod );
                        put( "HeartBeatUrl", heartBeatUrl );
                        put( "HeartBeatMethod", heartBeatMethod );
                        put( "Timeout", timeout );
                        put( "PlayDtmf", playDtmf );
                        put( "HideCallerId", hideCallerId );
                        put( "Record", record );
                        put( "RecordCallBackUrl", recordCallBackUrl );
                        put( "RecordCallBackMethod", recordCallBackMethod );
                        put( "Transcribe", transcribe );
                        put( "TranscribeCallBackUrl", transcribeCallBackUrl );
                    }
                };

                //prepare and invoke the API call request to fetch the response
                final HttpRequest _request = getClientInstance().post(_queryUrl, _headers, APIHelper.prepareFormFields(_parameters),
                                                Configuration.basicAuthUserName, Configuration.basicAuthPassword);

                //invoke the callback before request if its not null
                if (getHttpCallBack() != null)
                {
                    getHttpCallBack().OnBeforeRequest(_request);
                }

                //invoke request and get response
                getClientInstance().executeAsStringAsync(_request, new APICallBack<HttpResponse>() {
                    public void onSuccess(HttpContext _context, HttpResponse _response) {
                        try {

                            //invoke the callback after response if its not null
                            if (getHttpCallBack() != null)	
                            {
                                getHttpCallBack().OnAfterResponse(_context);
                            }

                            //handle errors defined at the API level
                            validateResponse(_response, _context);

                            //extract result from the http response
                            String _result = ((HttpStringResponse)_response).getBody();
                            //let the caller know of the success
                            callBack.onSuccess(_context, _result);
                        } catch (APIException error) {
                            //let the caller know of the error
                            callBack.onFailure(_context, error);
                        } catch (Exception exception) {
                            //let the caller know of the caught Exception
                            callBack.onFailure(_context, exception);
                        }
                    }
                    public void onFailure(HttpContext _context, Throwable _error) {
                        //invoke the callback after response if its not null
                        if (getHttpCallBack() != null)
                        {
                            getHttpCallBack().OnAfterResponse(_context);
                        }

                        //let the caller know of the failure
                        callBack.onFailure(_context, _error);
                    }
                });
            }
        };

        //execute async using thread pool
        APIHelper.getScheduler().execute(_responseTask);
    }

}