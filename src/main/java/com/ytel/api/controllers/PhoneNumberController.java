/*
 * YtelAPIV3Lib
 *
 * This file was automatically generated by APIMATIC v2.0 ( https://apimatic.io ).
 */
package com.ytel.api.controllers;

import java.io.*;
import java.util.*;
import java.util.concurrent.*;

import com.ytel.api.*;
import com.ytel.api.models.*;
import com.ytel.api.exceptions.*;
import com.ytel.api.http.client.HttpClient;
import com.ytel.api.http.client.HttpContext;
import com.ytel.api.http.request.HttpRequest;
import com.ytel.api.http.response.HttpResponse;
import com.ytel.api.http.response.HttpStringResponse;
import com.ytel.api.http.client.APICallBack;
import com.ytel.api.controllers.syncwrapper.APICallBackCatcher;

public class PhoneNumberController extends BaseController {    
    //private static variables for the singleton pattern
    private static Object syncObject = new Object();
    private static PhoneNumberController instance = null;

    /**
     * Singleton pattern implementation 
     * @return The singleton instance of the PhoneNumberController class 
     */
    public static PhoneNumberController getInstance() {
        synchronized (syncObject) {
            if (null == instance) {
                instance = new PhoneNumberController();
            }
        }
        return instance;
    }

    /**
     * Get DID Score Number
     * @param    phonenumber    Required parameter: Specifies the multiple phone numbers for check updated spamscore .
     * @return    Returns the String response from the API call 
     */
    public String createGetDIDScore(
                final String phonenumber
    ) throws Throwable {
        APICallBackCatcher<String> callback = new APICallBackCatcher<String>();
        createGetDIDScoreAsync(phonenumber, callback);
        if(!callback.isSuccess())
            throw callback.getError();
        return callback.getResult();
    }

    /**
     * Get DID Score Number
     * @param    phonenumber    Required parameter: Specifies the multiple phone numbers for check updated spamscore .
     * @return    Returns the void response from the API call 
     */
    public void createGetDIDScoreAsync(
                final String phonenumber,
                final APICallBack<String> callBack
    ) {
        Runnable _responseTask = new Runnable() {
            public void run() {
                //the base uri for api requests
                String _baseUri = Configuration.baseUri;

                //prepare query string for API call
                StringBuilder _queryBuilder = new StringBuilder(_baseUri);
                _queryBuilder.append("/incomingphone/getdidscore.json");
                //validate and preprocess url
                String _queryUrl = APIHelper.cleanUrl(_queryBuilder);

                //load all headers for the outgoing API request
                Map<String, String> _headers = new HashMap<String, String>() {
                    private static final long serialVersionUID = 9024873901054908219L;
                    {
                        put( "user-agent", "APIMATIC 2.0" );
                    }
                };

                //load all fields for the outgoing API request
                Map<String, Object> _parameters = new HashMap<String, Object>() {
                    private static final long serialVersionUID = 4569223520676436516L;
                    {
                        put( "Phonenumber", phonenumber );
                    }
                };

                //prepare and invoke the API call request to fetch the response
                final HttpRequest _request = getClientInstance().post(_queryUrl, _headers, APIHelper.prepareFormFields(_parameters),
                                                Configuration.basicAuthUserName, Configuration.basicAuthPassword);

                //invoke the callback before request if its not null
                if (getHttpCallBack() != null)
                {
                    getHttpCallBack().OnBeforeRequest(_request);
                }

                //invoke request and get response
                getClientInstance().executeAsStringAsync(_request, new APICallBack<HttpResponse>() {
                    public void onSuccess(HttpContext _context, HttpResponse _response) {
                        try {

                            //invoke the callback after response if its not null
                            if (getHttpCallBack() != null)	
                            {
                                getHttpCallBack().OnAfterResponse(_context);
                            }

                            //handle errors defined at the API level
                            validateResponse(_response, _context);

                            //extract result from the http response
                            String _result = ((HttpStringResponse)_response).getBody();
                            //let the caller know of the success
                            callBack.onSuccess(_context, _result);
                        } catch (APIException error) {
                            //let the caller know of the error
                            callBack.onFailure(_context, error);
                        } catch (Exception exception) {
                            //let the caller know of the caught Exception
                            callBack.onFailure(_context, exception);
                        }
                    }
                    public void onFailure(HttpContext _context, Throwable _error) {
                        //invoke the callback after response if its not null
                        if (getHttpCallBack() != null)
                        {
                            getHttpCallBack().OnAfterResponse(_context);
                        }

                        //let the caller know of the failure
                        callBack.onFailure(_context, _error);
                    }
                });
            }
        };

        //execute async using thread pool
        APIHelper.getScheduler().execute(_responseTask);
    }

    /**
     * Transfer phone number that has been purchased for from one account to another account.
     * @param    phonenumber    Required parameter: A valid 10-digit Ytel number (E.164 format).
     * @param    fromaccountsid    Required parameter: A specific Accountsid from where Number is getting transfer.
     * @param    toaccountsid    Required parameter: A specific Accountsid to which Number is getting transfer.
     * @return    Returns the String response from the API call 
     */
    public String createMoveNumber(
                final String phonenumber,
                final String fromaccountsid,
                final String toaccountsid
    ) throws Throwable {
        APICallBackCatcher<String> callback = new APICallBackCatcher<String>();
        createMoveNumberAsync(phonenumber, fromaccountsid, toaccountsid, callback);
        if(!callback.isSuccess())
            throw callback.getError();
        return callback.getResult();
    }

    /**
     * Transfer phone number that has been purchased for from one account to another account.
     * @param    phonenumber    Required parameter: A valid 10-digit Ytel number (E.164 format).
     * @param    fromaccountsid    Required parameter: A specific Accountsid from where Number is getting transfer.
     * @param    toaccountsid    Required parameter: A specific Accountsid to which Number is getting transfer.
     * @return    Returns the void response from the API call 
     */
    public void createMoveNumberAsync(
                final String phonenumber,
                final String fromaccountsid,
                final String toaccountsid,
                final APICallBack<String> callBack
    ) {
        Runnable _responseTask = new Runnable() {
            public void run() {
                //the base uri for api requests
                String _baseUri = Configuration.baseUri;

                //prepare query string for API call
                StringBuilder _queryBuilder = new StringBuilder(_baseUri);
                _queryBuilder.append("/incomingphone/transferphonenumbers.json");
                //validate and preprocess url
                String _queryUrl = APIHelper.cleanUrl(_queryBuilder);

                //load all headers for the outgoing API request
                Map<String, String> _headers = new HashMap<String, String>() {
                    private static final long serialVersionUID = 9024873901054908219L;
                    {
                        put( "user-agent", "APIMATIC 2.0" );
                    }
                };

                //load all fields for the outgoing API request
                Map<String, Object> _parameters = new HashMap<String, Object>() {
                    private static final long serialVersionUID = 630566948109052060L;
                    {
                        put( "phonenumber", phonenumber );
                        put( "fromaccountsid", fromaccountsid );
                        put( "toaccountsid", toaccountsid );
                    }
                };

                //prepare and invoke the API call request to fetch the response
                final HttpRequest _request = getClientInstance().post(_queryUrl, _headers, APIHelper.prepareFormFields(_parameters),
                                                Configuration.basicAuthUserName, Configuration.basicAuthPassword);

                //invoke the callback before request if its not null
                if (getHttpCallBack() != null)
                {
                    getHttpCallBack().OnBeforeRequest(_request);
                }

                //invoke request and get response
                getClientInstance().executeAsStringAsync(_request, new APICallBack<HttpResponse>() {
                    public void onSuccess(HttpContext _context, HttpResponse _response) {
                        try {

                            //invoke the callback after response if its not null
                            if (getHttpCallBack() != null)	
                            {
                                getHttpCallBack().OnAfterResponse(_context);
                            }

                            //handle errors defined at the API level
                            validateResponse(_response, _context);

                            //extract result from the http response
                            String _result = ((HttpStringResponse)_response).getBody();
                            //let the caller know of the success
                            callBack.onSuccess(_context, _result);
                        } catch (APIException error) {
                            //let the caller know of the error
                            callBack.onFailure(_context, error);
                        } catch (Exception exception) {
                            //let the caller know of the caught Exception
                            callBack.onFailure(_context, exception);
                        }
                    }
                    public void onFailure(HttpContext _context, Throwable _error) {
                        //invoke the callback after response if its not null
                        if (getHttpCallBack() != null)
                        {
                            getHttpCallBack().OnAfterResponse(_context);
                        }

                        //let the caller know of the failure
                        callBack.onFailure(_context, _error);
                    }
                });
            }
        };

        //execute async using thread pool
        APIHelper.getScheduler().execute(_responseTask);
    }

    /**
     * Purchase a phone number to be used with your Ytel account
     * @param    phoneNumber    Required parameter: A valid 10-digit Ytel number (E.164 format).
     * @return    Returns the String response from the API call 
     */
    public String createPurchaseNumber(
                final String phoneNumber
    ) throws Throwable {
        APICallBackCatcher<String> callback = new APICallBackCatcher<String>();
        createPurchaseNumberAsync(phoneNumber, callback);
        if(!callback.isSuccess())
            throw callback.getError();
        return callback.getResult();
    }

    /**
     * Purchase a phone number to be used with your Ytel account
     * @param    phoneNumber    Required parameter: A valid 10-digit Ytel number (E.164 format).
     * @return    Returns the void response from the API call 
     */
    public void createPurchaseNumberAsync(
                final String phoneNumber,
                final APICallBack<String> callBack
    ) {
        Runnable _responseTask = new Runnable() {
            public void run() {
                //the base uri for api requests
                String _baseUri = Configuration.baseUri;

                //prepare query string for API call
                StringBuilder _queryBuilder = new StringBuilder(_baseUri);
                _queryBuilder.append("/incomingphone/buynumber.json");
                //validate and preprocess url
                String _queryUrl = APIHelper.cleanUrl(_queryBuilder);

                //load all headers for the outgoing API request
                Map<String, String> _headers = new HashMap<String, String>() {
                    private static final long serialVersionUID = 9024873901054908219L;
                    {
                        put( "user-agent", "APIMATIC 2.0" );
                    }
                };

                //load all fields for the outgoing API request
                Map<String, Object> _parameters = new HashMap<String, Object>() {
                    private static final long serialVersionUID = -96923855L;
                    {
                        put( "PhoneNumber", phoneNumber );
                    }
                };

                //prepare and invoke the API call request to fetch the response
                final HttpRequest _request = getClientInstance().post(_queryUrl, _headers, APIHelper.prepareFormFields(_parameters),
                                                Configuration.basicAuthUserName, Configuration.basicAuthPassword);

                //invoke the callback before request if its not null
                if (getHttpCallBack() != null)
                {
                    getHttpCallBack().OnBeforeRequest(_request);
                }

                //invoke request and get response
                getClientInstance().executeAsStringAsync(_request, new APICallBack<HttpResponse>() {
                    public void onSuccess(HttpContext _context, HttpResponse _response) {
                        try {

                            //invoke the callback after response if its not null
                            if (getHttpCallBack() != null)	
                            {
                                getHttpCallBack().OnAfterResponse(_context);
                            }

                            //handle errors defined at the API level
                            validateResponse(_response, _context);

                            //extract result from the http response
                            String _result = ((HttpStringResponse)_response).getBody();
                            //let the caller know of the success
                            callBack.onSuccess(_context, _result);
                        } catch (APIException error) {
                            //let the caller know of the error
                            callBack.onFailure(_context, error);
                        } catch (Exception exception) {
                            //let the caller know of the caught Exception
                            callBack.onFailure(_context, exception);
                        }
                    }
                    public void onFailure(HttpContext _context, Throwable _error) {
                        //invoke the callback after response if its not null
                        if (getHttpCallBack() != null)
                        {
                            getHttpCallBack().OnAfterResponse(_context);
                        }

                        //let the caller know of the failure
                        callBack.onFailure(_context, _error);
                    }
                });
            }
        };

        //execute async using thread pool
        APIHelper.getScheduler().execute(_responseTask);
    }

    /**
     * Remove a purchased Ytel number from your account.
     * @param    responseType    Required parameter: Response type format xml or json
     * @param    phoneNumber    Required parameter: A valid 10-digit Ytel number (E.164 format).
     * @return    Returns the String response from the API call 
     */
    public String createReleaseNumber(
                final String responseType,
                final String phoneNumber
    ) throws Throwable {
        APICallBackCatcher<String> callback = new APICallBackCatcher<String>();
        createReleaseNumberAsync(responseType, phoneNumber, callback);
        if(!callback.isSuccess())
            throw callback.getError();
        return callback.getResult();
    }

    /**
     * Remove a purchased Ytel number from your account.
     * @param    responseType    Required parameter: Response type format xml or json
     * @param    phoneNumber    Required parameter: A valid 10-digit Ytel number (E.164 format).
     * @return    Returns the void response from the API call 
     */
    public void createReleaseNumberAsync(
                final String responseType,
                final String phoneNumber,
                final APICallBack<String> callBack
    ) {
        Runnable _responseTask = new Runnable() {
            public void run() {
                //the base uri for api requests
                String _baseUri = Configuration.baseUri;

                //prepare query string for API call
                StringBuilder _queryBuilder = new StringBuilder(_baseUri);
                _queryBuilder.append("/incomingphone/releasenumber.{ResponseType}");

                //process template parameters
                APIHelper.appendUrlWithTemplateParameters(_queryBuilder, new HashMap<String, Object>() {
                    private static final long serialVersionUID = -1389019885L;
                    {
                        put( "ResponseType", responseType );
                    }});
                //validate and preprocess url
                String _queryUrl = APIHelper.cleanUrl(_queryBuilder);

                //load all headers for the outgoing API request
                Map<String, String> _headers = new HashMap<String, String>() {
                    private static final long serialVersionUID = 9024873901054908219L;
                    {
                        put( "user-agent", "APIMATIC 2.0" );
                    }
                };

                //load all fields for the outgoing API request
                Map<String, Object> _parameters = new HashMap<String, Object>() {
                    private static final long serialVersionUID = -96923855L;
                    {
                        put( "PhoneNumber", phoneNumber );
                    }
                };

                //prepare and invoke the API call request to fetch the response
                final HttpRequest _request = getClientInstance().post(_queryUrl, _headers, APIHelper.prepareFormFields(_parameters),
                                                Configuration.basicAuthUserName, Configuration.basicAuthPassword);

                //invoke the callback before request if its not null
                if (getHttpCallBack() != null)
                {
                    getHttpCallBack().OnBeforeRequest(_request);
                }

                //invoke request and get response
                getClientInstance().executeAsStringAsync(_request, new APICallBack<HttpResponse>() {
                    public void onSuccess(HttpContext _context, HttpResponse _response) {
                        try {

                            //invoke the callback after response if its not null
                            if (getHttpCallBack() != null)	
                            {
                                getHttpCallBack().OnAfterResponse(_context);
                            }

                            //handle errors defined at the API level
                            validateResponse(_response, _context);

                            //extract result from the http response
                            String _result = ((HttpStringResponse)_response).getBody();
                            //let the caller know of the success
                            callBack.onSuccess(_context, _result);
                        } catch (APIException error) {
                            //let the caller know of the error
                            callBack.onFailure(_context, error);
                        } catch (Exception exception) {
                            //let the caller know of the caught Exception
                            callBack.onFailure(_context, exception);
                        }
                    }
                    public void onFailure(HttpContext _context, Throwable _error) {
                        //invoke the callback after response if its not null
                        if (getHttpCallBack() != null)
                        {
                            getHttpCallBack().OnAfterResponse(_context);
                        }

                        //let the caller know of the failure
                        callBack.onFailure(_context, _error);
                    }
                });
            }
        };

        //execute async using thread pool
        APIHelper.getScheduler().execute(_responseTask);
    }

    /**
     * Retrieve the details for a phone number by its number.
     * @param    phoneNumber    Required parameter: A valid Ytel 10-digit phone number (E.164 format).
     * @return    Returns the String response from the API call 
     */
    public String createViewDetails(
                final String phoneNumber
    ) throws Throwable {
        APICallBackCatcher<String> callback = new APICallBackCatcher<String>();
        createViewDetailsAsync(phoneNumber, callback);
        if(!callback.isSuccess())
            throw callback.getError();
        return callback.getResult();
    }

    /**
     * Retrieve the details for a phone number by its number.
     * @param    phoneNumber    Required parameter: A valid Ytel 10-digit phone number (E.164 format).
     * @return    Returns the void response from the API call 
     */
    public void createViewDetailsAsync(
                final String phoneNumber,
                final APICallBack<String> callBack
    ) {
        Runnable _responseTask = new Runnable() {
            public void run() {
                //the base uri for api requests
                String _baseUri = Configuration.baseUri;

                //prepare query string for API call
                StringBuilder _queryBuilder = new StringBuilder(_baseUri);
                _queryBuilder.append("/incomingphone/viewnumber.json");
                //validate and preprocess url
                String _queryUrl = APIHelper.cleanUrl(_queryBuilder);

                //load all headers for the outgoing API request
                Map<String, String> _headers = new HashMap<String, String>() {
                    private static final long serialVersionUID = 9024873901054908219L;
                    {
                        put( "user-agent", "APIMATIC 2.0" );
                    }
                };

                //load all fields for the outgoing API request
                Map<String, Object> _parameters = new HashMap<String, Object>() {
                    private static final long serialVersionUID = -96923855L;
                    {
                        put( "PhoneNumber", phoneNumber );
                    }
                };

                //prepare and invoke the API call request to fetch the response
                final HttpRequest _request = getClientInstance().post(_queryUrl, _headers, APIHelper.prepareFormFields(_parameters),
                                                Configuration.basicAuthUserName, Configuration.basicAuthPassword);

                //invoke the callback before request if its not null
                if (getHttpCallBack() != null)
                {
                    getHttpCallBack().OnBeforeRequest(_request);
                }

                //invoke request and get response
                getClientInstance().executeAsStringAsync(_request, new APICallBack<HttpResponse>() {
                    public void onSuccess(HttpContext _context, HttpResponse _response) {
                        try {

                            //invoke the callback after response if its not null
                            if (getHttpCallBack() != null)	
                            {
                                getHttpCallBack().OnAfterResponse(_context);
                            }

                            //handle errors defined at the API level
                            validateResponse(_response, _context);

                            //extract result from the http response
                            String _result = ((HttpStringResponse)_response).getBody();
                            //let the caller know of the success
                            callBack.onSuccess(_context, _result);
                        } catch (APIException error) {
                            //let the caller know of the error
                            callBack.onFailure(_context, error);
                        } catch (Exception exception) {
                            //let the caller know of the caught Exception
                            callBack.onFailure(_context, exception);
                        }
                    }
                    public void onFailure(HttpContext _context, Throwable _error) {
                        //invoke the callback after response if its not null
                        if (getHttpCallBack() != null)
                        {
                            getHttpCallBack().OnAfterResponse(_context);
                        }

                        //let the caller know of the failure
                        callBack.onFailure(_context, _error);
                    }
                });
            }
        };

        //execute async using thread pool
        APIHelper.getScheduler().execute(_responseTask);
    }

    /**
     * Remove a purchased Ytel number from your account.
     * @param    phoneNumber    Required parameter: A valid Ytel comma separated numbers (E.164 format).
     * @return    Returns the String response from the API call 
     */
    public String createBulkRelease(
                final String phoneNumber
    ) throws Throwable {
        APICallBackCatcher<String> callback = new APICallBackCatcher<String>();
        createBulkReleaseAsync(phoneNumber, callback);
        if(!callback.isSuccess())
            throw callback.getError();
        return callback.getResult();
    }

    /**
     * Remove a purchased Ytel number from your account.
     * @param    phoneNumber    Required parameter: A valid Ytel comma separated numbers (E.164 format).
     * @return    Returns the void response from the API call 
     */
    public void createBulkReleaseAsync(
                final String phoneNumber,
                final APICallBack<String> callBack
    ) {
        Runnable _responseTask = new Runnable() {
            public void run() {
                //the base uri for api requests
                String _baseUri = Configuration.baseUri;

                //prepare query string for API call
                StringBuilder _queryBuilder = new StringBuilder(_baseUri);
                _queryBuilder.append("/incomingphone/massreleasenumber.json");
                //validate and preprocess url
                String _queryUrl = APIHelper.cleanUrl(_queryBuilder);

                //load all headers for the outgoing API request
                Map<String, String> _headers = new HashMap<String, String>() {
                    private static final long serialVersionUID = 9024873901054908219L;
                    {
                        put( "user-agent", "APIMATIC 2.0" );
                    }
                };

                //load all fields for the outgoing API request
                Map<String, Object> _parameters = new HashMap<String, Object>() {
                    private static final long serialVersionUID = -96923855L;
                    {
                        put( "PhoneNumber", phoneNumber );
                    }
                };

                //prepare and invoke the API call request to fetch the response
                final HttpRequest _request = getClientInstance().post(_queryUrl, _headers, APIHelper.prepareFormFields(_parameters),
                                                Configuration.basicAuthUserName, Configuration.basicAuthPassword);

                //invoke the callback before request if its not null
                if (getHttpCallBack() != null)
                {
                    getHttpCallBack().OnBeforeRequest(_request);
                }

                //invoke request and get response
                getClientInstance().executeAsStringAsync(_request, new APICallBack<HttpResponse>() {
                    public void onSuccess(HttpContext _context, HttpResponse _response) {
                        try {

                            //invoke the callback after response if its not null
                            if (getHttpCallBack() != null)	
                            {
                                getHttpCallBack().OnAfterResponse(_context);
                            }

                            //handle errors defined at the API level
                            validateResponse(_response, _context);

                            //extract result from the http response
                            String _result = ((HttpStringResponse)_response).getBody();
                            //let the caller know of the success
                            callBack.onSuccess(_context, _result);
                        } catch (APIException error) {
                            //let the caller know of the error
                            callBack.onFailure(_context, error);
                        } catch (Exception exception) {
                            //let the caller know of the caught Exception
                            callBack.onFailure(_context, exception);
                        }
                    }
                    public void onFailure(HttpContext _context, Throwable _error) {
                        //invoke the callback after response if its not null
                        if (getHttpCallBack() != null)
                        {
                            getHttpCallBack().OnAfterResponse(_context);
                        }

                        //let the caller know of the failure
                        callBack.onFailure(_context, _error);
                    }
                });
            }
        };

        //execute async using thread pool
        APIHelper.getScheduler().execute(_responseTask);
    }

    /**
     * Retrieve a list of available phone numbers that can be purchased and used for your Ytel account.
     * @param    numbertype    Required parameter: Number type either SMS,Voice or all
     * @param    areacode    Required parameter: Specifies the area code for the returned list of available numbers. Only available for North American numbers.
     * @param    pagesize    Optional parameter: The count of objects to return.
     * @return    Returns the String response from the API call 
     */
    public String createAvailableNumbers(
                final NumbertypeEnum numbertype,
                final String areacode,
                final Integer pagesize
    ) throws Throwable {
        APICallBackCatcher<String> callback = new APICallBackCatcher<String>();
        createAvailableNumbersAsync(numbertype, areacode, pagesize, callback);
        if(!callback.isSuccess())
            throw callback.getError();
        return callback.getResult();
    }

    /**
     * Retrieve a list of available phone numbers that can be purchased and used for your Ytel account.
     * @param    numbertype    Required parameter: Number type either SMS,Voice or all
     * @param    areacode    Required parameter: Specifies the area code for the returned list of available numbers. Only available for North American numbers.
     * @param    pagesize    Optional parameter: The count of objects to return.
     * @return    Returns the void response from the API call 
     */
    public void createAvailableNumbersAsync(
                final NumbertypeEnum numbertype,
                final String areacode,
                final Integer pagesize,
                final APICallBack<String> callBack
    ) {
        Runnable _responseTask = new Runnable() {
            public void run() {
                //the base uri for api requests
                String _baseUri = Configuration.baseUri;

                //prepare query string for API call
                StringBuilder _queryBuilder = new StringBuilder(_baseUri);
                _queryBuilder.append("/incomingphone/availablenumber.json");
                //validate and preprocess url
                String _queryUrl = APIHelper.cleanUrl(_queryBuilder);

                //load all headers for the outgoing API request
                Map<String, String> _headers = new HashMap<String, String>() {
                    private static final long serialVersionUID = 9024873901054908219L;
                    {
                        put( "user-agent", "APIMATIC 2.0" );
                    }
                };

                //load all fields for the outgoing API request
                Map<String, Object> _parameters = new HashMap<String, Object>() {
                    private static final long serialVersionUID = -5852371085070537037L;
                    {
                        put( "numbertype", (numbertype != null) ? numbertype.value() : null );
                        put( "areacode", areacode );
                        put( "pagesize", pagesize );
                    }
                };

                //prepare and invoke the API call request to fetch the response
                final HttpRequest _request = getClientInstance().post(_queryUrl, _headers, APIHelper.prepareFormFields(_parameters),
                                                Configuration.basicAuthUserName, Configuration.basicAuthPassword);

                //invoke the callback before request if its not null
                if (getHttpCallBack() != null)
                {
                    getHttpCallBack().OnBeforeRequest(_request);
                }

                //invoke request and get response
                getClientInstance().executeAsStringAsync(_request, new APICallBack<HttpResponse>() {
                    public void onSuccess(HttpContext _context, HttpResponse _response) {
                        try {

                            //invoke the callback after response if its not null
                            if (getHttpCallBack() != null)	
                            {
                                getHttpCallBack().OnAfterResponse(_context);
                            }

                            //handle errors defined at the API level
                            validateResponse(_response, _context);

                            //extract result from the http response
                            String _result = ((HttpStringResponse)_response).getBody();
                            //let the caller know of the success
                            callBack.onSuccess(_context, _result);
                        } catch (APIException error) {
                            //let the caller know of the error
                            callBack.onFailure(_context, error);
                        } catch (Exception exception) {
                            //let the caller know of the caught Exception
                            callBack.onFailure(_context, exception);
                        }
                    }
                    public void onFailure(HttpContext _context, Throwable _error) {
                        //invoke the callback after response if its not null
                        if (getHttpCallBack() != null)
                        {
                            getHttpCallBack().OnAfterResponse(_context);
                        }

                        //let the caller know of the failure
                        callBack.onFailure(_context, _error);
                    }
                });
            }
        };

        //execute async using thread pool
        APIHelper.getScheduler().execute(_responseTask);
    }

    /**
     * Update properties for a Ytel number that has been purchased for your account. Refer to the parameters list for the list of properties that can be updated.
     * @param    phoneNumber    Required parameter: A valid Ytel number (E.164 format).
     * @param    voiceUrl    Required parameter: URL requested once the call connects
     * @param    friendlyName    Optional parameter: Phone number friendly name description
     * @param    voiceMethod    Optional parameter: Post or Get
     * @param    voiceFallbackUrl    Optional parameter: URL requested if the voice URL is not available
     * @param    voiceFallbackMethod    Optional parameter: Post or Get
     * @param    hangupCallback    Optional parameter: callback url after a hangup occurs
     * @param    hangupCallbackMethod    Optional parameter: Post or Get
     * @param    heartbeatUrl    Optional parameter: URL requested once the call connects
     * @param    heartbeatMethod    Optional parameter: URL that can be requested every 60 seconds during the call to notify of elapsed time
     * @param    smsUrl    Optional parameter: URL requested when an SMS is received
     * @param    smsMethod    Optional parameter: Post or Get
     * @param    smsFallbackUrl    Optional parameter: URL used if any errors occur during execution of InboundXML from an SMS or at initial request of the SmsUrl.
     * @param    smsFallbackMethod    Optional parameter: The HTTP method Ytel will use when URL requested if the SmsUrl is not available.
     * @return    Returns the String response from the API call 
     */
    public String updateNumber(
                final String phoneNumber,
                final String voiceUrl,
                final String friendlyName,
                final String voiceMethod,
                final String voiceFallbackUrl,
                final String voiceFallbackMethod,
                final String hangupCallback,
                final String hangupCallbackMethod,
                final String heartbeatUrl,
                final String heartbeatMethod,
                final String smsUrl,
                final String smsMethod,
                final String smsFallbackUrl,
                final String smsFallbackMethod
    ) throws Throwable {
        APICallBackCatcher<String> callback = new APICallBackCatcher<String>();
        updateNumberAsync(phoneNumber, voiceUrl, friendlyName, voiceMethod, voiceFallbackUrl, voiceFallbackMethod, hangupCallback, hangupCallbackMethod, heartbeatUrl, heartbeatMethod, smsUrl, smsMethod, smsFallbackUrl, smsFallbackMethod, callback);
        if(!callback.isSuccess())
            throw callback.getError();
        return callback.getResult();
    }

    /**
     * Update properties for a Ytel number that has been purchased for your account. Refer to the parameters list for the list of properties that can be updated.
     * @param    phoneNumber    Required parameter: A valid Ytel number (E.164 format).
     * @param    voiceUrl    Required parameter: URL requested once the call connects
     * @param    friendlyName    Optional parameter: Phone number friendly name description
     * @param    voiceMethod    Optional parameter: Post or Get
     * @param    voiceFallbackUrl    Optional parameter: URL requested if the voice URL is not available
     * @param    voiceFallbackMethod    Optional parameter: Post or Get
     * @param    hangupCallback    Optional parameter: callback url after a hangup occurs
     * @param    hangupCallbackMethod    Optional parameter: Post or Get
     * @param    heartbeatUrl    Optional parameter: URL requested once the call connects
     * @param    heartbeatMethod    Optional parameter: URL that can be requested every 60 seconds during the call to notify of elapsed time
     * @param    smsUrl    Optional parameter: URL requested when an SMS is received
     * @param    smsMethod    Optional parameter: Post or Get
     * @param    smsFallbackUrl    Optional parameter: URL used if any errors occur during execution of InboundXML from an SMS or at initial request of the SmsUrl.
     * @param    smsFallbackMethod    Optional parameter: The HTTP method Ytel will use when URL requested if the SmsUrl is not available.
     * @return    Returns the void response from the API call 
     */
    public void updateNumberAsync(
                final String phoneNumber,
                final String voiceUrl,
                final String friendlyName,
                final String voiceMethod,
                final String voiceFallbackUrl,
                final String voiceFallbackMethod,
                final String hangupCallback,
                final String hangupCallbackMethod,
                final String heartbeatUrl,
                final String heartbeatMethod,
                final String smsUrl,
                final String smsMethod,
                final String smsFallbackUrl,
                final String smsFallbackMethod,
                final APICallBack<String> callBack
    ) {
        Runnable _responseTask = new Runnable() {
            public void run() {
                //the base uri for api requests
                String _baseUri = Configuration.baseUri;

                //prepare query string for API call
                StringBuilder _queryBuilder = new StringBuilder(_baseUri);
                _queryBuilder.append("/incomingphone/updatenumber.json");
                //validate and preprocess url
                String _queryUrl = APIHelper.cleanUrl(_queryBuilder);

                //load all headers for the outgoing API request
                Map<String, String> _headers = new HashMap<String, String>() {
                    private static final long serialVersionUID = 9024873901054908219L;
                    {
                        put( "user-agent", "APIMATIC 2.0" );
                    }
                };

                //load all fields for the outgoing API request
                Map<String, Object> _parameters = new HashMap<String, Object>() {
                    private static final long serialVersionUID = -6096512801608054445L;
                    {
                        put( "PhoneNumber", phoneNumber );
                        put( "VoiceUrl", voiceUrl );
                        put( "FriendlyName", friendlyName );
                        put( "VoiceMethod", voiceMethod );
                        put( "VoiceFallbackUrl", voiceFallbackUrl );
                        put( "VoiceFallbackMethod", voiceFallbackMethod );
                        put( "HangupCallback", hangupCallback );
                        put( "HangupCallbackMethod", hangupCallbackMethod );
                        put( "HeartbeatUrl", heartbeatUrl );
                        put( "HeartbeatMethod", heartbeatMethod );
                        put( "SmsUrl", smsUrl );
                        put( "SmsMethod", smsMethod );
                        put( "SmsFallbackUrl", smsFallbackUrl );
                        put( "SmsFallbackMethod", smsFallbackMethod );
                    }
                };

                //prepare and invoke the API call request to fetch the response
                final HttpRequest _request = getClientInstance().post(_queryUrl, _headers, APIHelper.prepareFormFields(_parameters),
                                                Configuration.basicAuthUserName, Configuration.basicAuthPassword);

                //invoke the callback before request if its not null
                if (getHttpCallBack() != null)
                {
                    getHttpCallBack().OnBeforeRequest(_request);
                }

                //invoke request and get response
                getClientInstance().executeAsStringAsync(_request, new APICallBack<HttpResponse>() {
                    public void onSuccess(HttpContext _context, HttpResponse _response) {
                        try {

                            //invoke the callback after response if its not null
                            if (getHttpCallBack() != null)	
                            {
                                getHttpCallBack().OnAfterResponse(_context);
                            }

                            //handle errors defined at the API level
                            validateResponse(_response, _context);

                            //extract result from the http response
                            String _result = ((HttpStringResponse)_response).getBody();
                            //let the caller know of the success
                            callBack.onSuccess(_context, _result);
                        } catch (APIException error) {
                            //let the caller know of the error
                            callBack.onFailure(_context, error);
                        } catch (Exception exception) {
                            //let the caller know of the caught Exception
                            callBack.onFailure(_context, exception);
                        }
                    }
                    public void onFailure(HttpContext _context, Throwable _error) {
                        //invoke the callback after response if its not null
                        if (getHttpCallBack() != null)
                        {
                            getHttpCallBack().OnAfterResponse(_context);
                        }

                        //let the caller know of the failure
                        callBack.onFailure(_context, _error);
                    }
                });
            }
        };

        //execute async using thread pool
        APIHelper.getScheduler().execute(_responseTask);
    }

    /**
     * Retrieve a list of purchased phones numbers associated with your Ytel account.
     * @param    page    Optional parameter: Which page of the overall response will be returned. Page indexing starts at 1.
     * @param    pageSize    Optional parameter: The page count to retrieve from the total results in the collection. Page indexing starts at 1.
     * @param    numberType    Optional parameter: The capability supported by the number.Number type either SMS,Voice or all
     * @param    friendlyName    Optional parameter: A human-readable label added to the number object.
     * @return    Returns the String response from the API call 
     */
    public String createListNumbers(
                final Integer page,
                final Integer pageSize,
                final NumberType14Enum numberType,
                final String friendlyName
    ) throws Throwable {
        APICallBackCatcher<String> callback = new APICallBackCatcher<String>();
        createListNumbersAsync(page, pageSize, numberType, friendlyName, callback);
        if(!callback.isSuccess())
            throw callback.getError();
        return callback.getResult();
    }

    /**
     * Retrieve a list of purchased phones numbers associated with your Ytel account.
     * @param    page    Optional parameter: Which page of the overall response will be returned. Page indexing starts at 1.
     * @param    pageSize    Optional parameter: The page count to retrieve from the total results in the collection. Page indexing starts at 1.
     * @param    numberType    Optional parameter: The capability supported by the number.Number type either SMS,Voice or all
     * @param    friendlyName    Optional parameter: A human-readable label added to the number object.
     * @return    Returns the void response from the API call 
     */
    public void createListNumbersAsync(
                final Integer page,
                final Integer pageSize,
                final NumberType14Enum numberType,
                final String friendlyName,
                final APICallBack<String> callBack
    ) {
        Runnable _responseTask = new Runnable() {
            public void run() {
                //the base uri for api requests
                String _baseUri = Configuration.baseUri;

                //prepare query string for API call
                StringBuilder _queryBuilder = new StringBuilder(_baseUri);
                _queryBuilder.append("/incomingphone/listnumber.json");
                //validate and preprocess url
                String _queryUrl = APIHelper.cleanUrl(_queryBuilder);

                //load all headers for the outgoing API request
                Map<String, String> _headers = new HashMap<String, String>() {
                    private static final long serialVersionUID = 9024873901054908219L;
                    {
                        put( "user-agent", "APIMATIC 2.0" );
                    }
                };

                //load all fields for the outgoing API request
                Map<String, Object> _parameters = new HashMap<String, Object>() {
                    private static final long serialVersionUID = 1034158496730897537L;
                    {
                        put( "Page", page );
                        put( "PageSize", pageSize );
                        put( "NumberType", (numberType != null) ? numberType.value() : null );
                        put( "FriendlyName", friendlyName );
                    }
                };

                //prepare and invoke the API call request to fetch the response
                final HttpRequest _request = getClientInstance().post(_queryUrl, _headers, APIHelper.prepareFormFields(_parameters),
                                                Configuration.basicAuthUserName, Configuration.basicAuthPassword);

                //invoke the callback before request if its not null
                if (getHttpCallBack() != null)
                {
                    getHttpCallBack().OnBeforeRequest(_request);
                }

                //invoke request and get response
                getClientInstance().executeAsStringAsync(_request, new APICallBack<HttpResponse>() {
                    public void onSuccess(HttpContext _context, HttpResponse _response) {
                        try {

                            //invoke the callback after response if its not null
                            if (getHttpCallBack() != null)	
                            {
                                getHttpCallBack().OnAfterResponse(_context);
                            }

                            //handle errors defined at the API level
                            validateResponse(_response, _context);

                            //extract result from the http response
                            String _result = ((HttpStringResponse)_response).getBody();
                            //let the caller know of the success
                            callBack.onSuccess(_context, _result);
                        } catch (APIException error) {
                            //let the caller know of the error
                            callBack.onFailure(_context, error);
                        } catch (Exception exception) {
                            //let the caller know of the caught Exception
                            callBack.onFailure(_context, exception);
                        }
                    }
                    public void onFailure(HttpContext _context, Throwable _error) {
                        //invoke the callback after response if its not null
                        if (getHttpCallBack() != null)
                        {
                            getHttpCallBack().OnAfterResponse(_context);
                        }

                        //let the caller know of the failure
                        callBack.onFailure(_context, _error);
                    }
                });
            }
        };

        //execute async using thread pool
        APIHelper.getScheduler().execute(_responseTask);
    }

    /**
     * Update properties for a Ytel numbers that has been purchased for your account. Refer to the parameters list for the list of properties that can be updated.
     * @param    phoneNumber    Required parameter: A valid comma(,) separated Ytel numbers. (E.164 format).
     * @param    voiceUrl    Required parameter: The URL returning InboundXML incoming calls should execute when connected.
     * @param    friendlyName    Optional parameter: A human-readable value for labeling the number.
     * @param    voiceMethod    Optional parameter: Specifies the HTTP method used to request the VoiceUrl once incoming call connects.
     * @param    voiceFallbackUrl    Optional parameter: URL used if any errors occur during execution of InboundXML on a call or at initial request of the voice url
     * @param    voiceFallbackMethod    Optional parameter: Specifies the HTTP method used to request the VoiceFallbackUrl once incoming call connects.
     * @param    hangupCallback    Optional parameter: URL that can be requested to receive notification when and how incoming call has ended.
     * @param    hangupCallbackMethod    Optional parameter: The HTTP method Ytel will use when requesting the HangupCallback URL.
     * @param    heartbeatUrl    Optional parameter: URL that can be used to monitor the phone number.
     * @param    heartbeatMethod    Optional parameter: The HTTP method Ytel will use when requesting the HeartbeatUrl.
     * @param    smsUrl    Optional parameter: URL requested when an SMS is received.
     * @param    smsMethod    Optional parameter: The HTTP method Ytel will use when requesting the SmsUrl.
     * @param    smsFallbackUrl    Optional parameter: URL used if any errors occur during execution of InboundXML from an SMS or at initial request of the SmsUrl.
     * @param    smsFallbackMethod    Optional parameter: The HTTP method Ytel will use when URL requested if the SmsUrl is not available.
     * @return    Returns the String response from the API call 
     */
    public String createBulkUpdateNumbers(
                final String phoneNumber,
                final String voiceUrl,
                final String friendlyName,
                final String voiceMethod,
                final String voiceFallbackUrl,
                final String voiceFallbackMethod,
                final String hangupCallback,
                final String hangupCallbackMethod,
                final String heartbeatUrl,
                final String heartbeatMethod,
                final String smsUrl,
                final String smsMethod,
                final String smsFallbackUrl,
                final String smsFallbackMethod
    ) throws Throwable {
        APICallBackCatcher<String> callback = new APICallBackCatcher<String>();
        createBulkUpdateNumbersAsync(phoneNumber, voiceUrl, friendlyName, voiceMethod, voiceFallbackUrl, voiceFallbackMethod, hangupCallback, hangupCallbackMethod, heartbeatUrl, heartbeatMethod, smsUrl, smsMethod, smsFallbackUrl, smsFallbackMethod, callback);
        if(!callback.isSuccess())
            throw callback.getError();
        return callback.getResult();
    }

    /**
     * Update properties for a Ytel numbers that has been purchased for your account. Refer to the parameters list for the list of properties that can be updated.
     * @param    phoneNumber    Required parameter: A valid comma(,) separated Ytel numbers. (E.164 format).
     * @param    voiceUrl    Required parameter: The URL returning InboundXML incoming calls should execute when connected.
     * @param    friendlyName    Optional parameter: A human-readable value for labeling the number.
     * @param    voiceMethod    Optional parameter: Specifies the HTTP method used to request the VoiceUrl once incoming call connects.
     * @param    voiceFallbackUrl    Optional parameter: URL used if any errors occur during execution of InboundXML on a call or at initial request of the voice url
     * @param    voiceFallbackMethod    Optional parameter: Specifies the HTTP method used to request the VoiceFallbackUrl once incoming call connects.
     * @param    hangupCallback    Optional parameter: URL that can be requested to receive notification when and how incoming call has ended.
     * @param    hangupCallbackMethod    Optional parameter: The HTTP method Ytel will use when requesting the HangupCallback URL.
     * @param    heartbeatUrl    Optional parameter: URL that can be used to monitor the phone number.
     * @param    heartbeatMethod    Optional parameter: The HTTP method Ytel will use when requesting the HeartbeatUrl.
     * @param    smsUrl    Optional parameter: URL requested when an SMS is received.
     * @param    smsMethod    Optional parameter: The HTTP method Ytel will use when requesting the SmsUrl.
     * @param    smsFallbackUrl    Optional parameter: URL used if any errors occur during execution of InboundXML from an SMS or at initial request of the SmsUrl.
     * @param    smsFallbackMethod    Optional parameter: The HTTP method Ytel will use when URL requested if the SmsUrl is not available.
     * @return    Returns the void response from the API call 
     */
    public void createBulkUpdateNumbersAsync(
                final String phoneNumber,
                final String voiceUrl,
                final String friendlyName,
                final String voiceMethod,
                final String voiceFallbackUrl,
                final String voiceFallbackMethod,
                final String hangupCallback,
                final String hangupCallbackMethod,
                final String heartbeatUrl,
                final String heartbeatMethod,
                final String smsUrl,
                final String smsMethod,
                final String smsFallbackUrl,
                final String smsFallbackMethod,
                final APICallBack<String> callBack
    ) {
        Runnable _responseTask = new Runnable() {
            public void run() {
                //the base uri for api requests
                String _baseUri = Configuration.baseUri;

                //prepare query string for API call
                StringBuilder _queryBuilder = new StringBuilder(_baseUri);
                _queryBuilder.append("/incomingphone/massupdatenumber.json");
                //validate and preprocess url
                String _queryUrl = APIHelper.cleanUrl(_queryBuilder);

                //load all headers for the outgoing API request
                Map<String, String> _headers = new HashMap<String, String>() {
                    private static final long serialVersionUID = 9024873901054908219L;
                    {
                        put( "user-agent", "APIMATIC 2.0" );
                    }
                };

                //load all fields for the outgoing API request
                Map<String, Object> _parameters = new HashMap<String, Object>() {
                    private static final long serialVersionUID = -6096512801608054445L;
                    {
                        put( "PhoneNumber", phoneNumber );
                        put( "VoiceUrl", voiceUrl );
                        put( "FriendlyName", friendlyName );
                        put( "VoiceMethod", voiceMethod );
                        put( "VoiceFallbackUrl", voiceFallbackUrl );
                        put( "VoiceFallbackMethod", voiceFallbackMethod );
                        put( "HangupCallback", hangupCallback );
                        put( "HangupCallbackMethod", hangupCallbackMethod );
                        put( "HeartbeatUrl", heartbeatUrl );
                        put( "HeartbeatMethod", heartbeatMethod );
                        put( "SmsUrl", smsUrl );
                        put( "SmsMethod", smsMethod );
                        put( "SmsFallbackUrl", smsFallbackUrl );
                        put( "SmsFallbackMethod", smsFallbackMethod );
                    }
                };

                //prepare and invoke the API call request to fetch the response
                final HttpRequest _request = getClientInstance().post(_queryUrl, _headers, APIHelper.prepareFormFields(_parameters),
                                                Configuration.basicAuthUserName, Configuration.basicAuthPassword);

                //invoke the callback before request if its not null
                if (getHttpCallBack() != null)
                {
                    getHttpCallBack().OnBeforeRequest(_request);
                }

                //invoke request and get response
                getClientInstance().executeAsStringAsync(_request, new APICallBack<HttpResponse>() {
                    public void onSuccess(HttpContext _context, HttpResponse _response) {
                        try {

                            //invoke the callback after response if its not null
                            if (getHttpCallBack() != null)	
                            {
                                getHttpCallBack().OnAfterResponse(_context);
                            }

                            //handle errors defined at the API level
                            validateResponse(_response, _context);

                            //extract result from the http response
                            String _result = ((HttpStringResponse)_response).getBody();
                            //let the caller know of the success
                            callBack.onSuccess(_context, _result);
                        } catch (APIException error) {
                            //let the caller know of the error
                            callBack.onFailure(_context, error);
                        } catch (Exception exception) {
                            //let the caller know of the caught Exception
                            callBack.onFailure(_context, exception);
                        }
                    }
                    public void onFailure(HttpContext _context, Throwable _error) {
                        //invoke the callback after response if its not null
                        if (getHttpCallBack() != null)
                        {
                            getHttpCallBack().OnAfterResponse(_context);
                        }

                        //let the caller know of the failure
                        callBack.onFailure(_context, _error);
                    }
                });
            }
        };

        //execute async using thread pool
        APIHelper.getScheduler().execute(_responseTask);
    }

    /**
     * Purchase a selected number of DID's from specific area codes to be used with your Ytel account.
     * @param    numberType    Required parameter: The capability the number supports.
     * @param    areaCode    Required parameter: Specifies the area code for the returned list of available numbers. Only available for North American numbers.
     * @param    quantity    Required parameter: A positive integer that tells how many number you want to buy at a time.
     * @param    leftover    Optional parameter: If desired quantity is unavailable purchase what is available .
     * @return    Returns the String response from the API call 
     */
    public String createBulkBuyNumbers(
                final NumberType15Enum numberType,
                final String areaCode,
                final String quantity,
                final String leftover
    ) throws Throwable {
        APICallBackCatcher<String> callback = new APICallBackCatcher<String>();
        createBulkBuyNumbersAsync(numberType, areaCode, quantity, leftover, callback);
        if(!callback.isSuccess())
            throw callback.getError();
        return callback.getResult();
    }

    /**
     * Purchase a selected number of DID's from specific area codes to be used with your Ytel account.
     * @param    numberType    Required parameter: The capability the number supports.
     * @param    areaCode    Required parameter: Specifies the area code for the returned list of available numbers. Only available for North American numbers.
     * @param    quantity    Required parameter: A positive integer that tells how many number you want to buy at a time.
     * @param    leftover    Optional parameter: If desired quantity is unavailable purchase what is available .
     * @return    Returns the void response from the API call 
     */
    public void createBulkBuyNumbersAsync(
                final NumberType15Enum numberType,
                final String areaCode,
                final String quantity,
                final String leftover,
                final APICallBack<String> callBack
    ) {
        Runnable _responseTask = new Runnable() {
            public void run() {
                //the base uri for api requests
                String _baseUri = Configuration.baseUri;

                //prepare query string for API call
                StringBuilder _queryBuilder = new StringBuilder(_baseUri);
                _queryBuilder.append("/incomingphone/bulkbuy.json");
                //validate and preprocess url
                String _queryUrl = APIHelper.cleanUrl(_queryBuilder);

                //load all headers for the outgoing API request
                Map<String, String> _headers = new HashMap<String, String>() {
                    private static final long serialVersionUID = 9024873901054908219L;
                    {
                        put( "user-agent", "APIMATIC 2.0" );
                    }
                };

                //load all fields for the outgoing API request
                Map<String, Object> _parameters = new HashMap<String, Object>() {
                    private static final long serialVersionUID = 3022565652821284577L;
                    {
                        put( "NumberType", (numberType != null) ? numberType.value() : null );
                        put( "AreaCode", areaCode );
                        put( "Quantity", quantity );
                        put( "Leftover", leftover );
                    }
                };

                //prepare and invoke the API call request to fetch the response
                final HttpRequest _request = getClientInstance().post(_queryUrl, _headers, APIHelper.prepareFormFields(_parameters),
                                                Configuration.basicAuthUserName, Configuration.basicAuthPassword);

                //invoke the callback before request if its not null
                if (getHttpCallBack() != null)
                {
                    getHttpCallBack().OnBeforeRequest(_request);
                }

                //invoke request and get response
                getClientInstance().executeAsStringAsync(_request, new APICallBack<HttpResponse>() {
                    public void onSuccess(HttpContext _context, HttpResponse _response) {
                        try {

                            //invoke the callback after response if its not null
                            if (getHttpCallBack() != null)	
                            {
                                getHttpCallBack().OnAfterResponse(_context);
                            }

                            //handle errors defined at the API level
                            validateResponse(_response, _context);

                            //extract result from the http response
                            String _result = ((HttpStringResponse)_response).getBody();
                            //let the caller know of the success
                            callBack.onSuccess(_context, _result);
                        } catch (APIException error) {
                            //let the caller know of the error
                            callBack.onFailure(_context, error);
                        } catch (Exception exception) {
                            //let the caller know of the caught Exception
                            callBack.onFailure(_context, exception);
                        }
                    }
                    public void onFailure(HttpContext _context, Throwable _error) {
                        //invoke the callback after response if its not null
                        if (getHttpCallBack() != null)
                        {
                            getHttpCallBack().OnAfterResponse(_context);
                        }

                        //let the caller know of the failure
                        callBack.onFailure(_context, _error);
                    }
                });
            }
        };

        //execute async using thread pool
        APIHelper.getScheduler().execute(_responseTask);
    }

}