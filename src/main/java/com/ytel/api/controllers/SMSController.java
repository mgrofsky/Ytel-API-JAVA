/*
 * YtelAPIV3Lib
 *
 * This file was automatically generated by APIMATIC v2.0 ( https://apimatic.io ).
 */
package com.ytel.api.controllers;

import java.io.*;
import java.util.*;
import java.util.concurrent.*;

import com.ytel.api.*;
import com.ytel.api.models.*;
import com.ytel.api.exceptions.*;
import com.ytel.api.http.client.HttpClient;
import com.ytel.api.http.client.HttpContext;
import com.ytel.api.http.request.HttpRequest;
import com.ytel.api.http.response.HttpResponse;
import com.ytel.api.http.response.HttpStringResponse;
import com.ytel.api.http.client.APICallBack;
import com.ytel.api.controllers.syncwrapper.APICallBackCatcher;

public class SMSController extends BaseController {    
    //private static variables for the singleton pattern
    private static Object syncObject = new Object();
    private static SMSController instance = null;

    /**
     * Singleton pattern implementation 
     * @return The singleton instance of the SMSController class 
     */
    public static SMSController getInstance() {
        synchronized (syncObject) {
            if (null == instance) {
                instance = new SMSController();
            }
        }
        return instance;
    }

    /**
     * Retrieve a single SMS message object with details by its SmsSid.
     * @param    messageSid    Required parameter: The unique identifier for a sms message.
     * @return    Returns the String response from the API call 
     */
    public String createViewSMS1(
                final String messageSid
    ) throws Throwable {
        APICallBackCatcher<String> callback = new APICallBackCatcher<String>();
        createViewSMS1Async(messageSid, callback);
        if(!callback.isSuccess())
            throw callback.getError();
        return callback.getResult();
    }

    /**
     * Retrieve a single SMS message object with details by its SmsSid.
     * @param    messageSid    Required parameter: The unique identifier for a sms message.
     * @return    Returns the void response from the API call 
     */
    public void createViewSMS1Async(
                final String messageSid,
                final APICallBack<String> callBack
    ) {
        Runnable _responseTask = new Runnable() {
            public void run() {
                //the base uri for api requests
                String _baseUri = Configuration.baseUri;

                //prepare query string for API call
                StringBuilder _queryBuilder = new StringBuilder(_baseUri);
                _queryBuilder.append("/sms/viewdetailsms.json");
                //validate and preprocess url
                String _queryUrl = APIHelper.cleanUrl(_queryBuilder);

                //load all headers for the outgoing API request
                Map<String, String> _headers = new HashMap<String, String>() {
                    private static final long serialVersionUID = 9024873901054908219L;
                    {
                        put( "user-agent", "APIMATIC 2.0" );
                    }
                };

                //load all fields for the outgoing API request
                Map<String, Object> _parameters = new HashMap<String, Object>() {
                    private static final long serialVersionUID = 4562468121865988708L;
                    {
                        put( "MessageSid", messageSid );
                    }
                };

                //prepare and invoke the API call request to fetch the response
                final HttpRequest _request = getClientInstance().post(_queryUrl, _headers, APIHelper.prepareFormFields(_parameters),
                                                Configuration.basicAuthUserName, Configuration.basicAuthPassword);

                //invoke the callback before request if its not null
                if (getHttpCallBack() != null)
                {
                    getHttpCallBack().OnBeforeRequest(_request);
                }

                //invoke request and get response
                getClientInstance().executeAsStringAsync(_request, new APICallBack<HttpResponse>() {
                    public void onSuccess(HttpContext _context, HttpResponse _response) {
                        try {

                            //invoke the callback after response if its not null
                            if (getHttpCallBack() != null)	
                            {
                                getHttpCallBack().OnAfterResponse(_context);
                            }

                            //handle errors defined at the API level
                            validateResponse(_response, _context);

                            //extract result from the http response
                            String _result = ((HttpStringResponse)_response).getBody();
                            //let the caller know of the success
                            callBack.onSuccess(_context, _result);
                        } catch (APIException error) {
                            //let the caller know of the error
                            callBack.onFailure(_context, error);
                        } catch (Exception exception) {
                            //let the caller know of the caught Exception
                            callBack.onFailure(_context, exception);
                        }
                    }
                    public void onFailure(HttpContext _context, Throwable _error) {
                        //invoke the callback after response if its not null
                        if (getHttpCallBack() != null)
                        {
                            getHttpCallBack().OnAfterResponse(_context);
                        }

                        //let the caller know of the failure
                        callBack.onFailure(_context, _error);
                    }
                });
            }
        };

        //execute async using thread pool
        APIHelper.getScheduler().execute(_responseTask);
    }

    /**
     * Retrieve a single SMS message object by its SmsSid.
     * @param    messageSid    Required parameter: The unique identifier for a sms message.
     * @return    Returns the String response from the API call 
     */
    public String createViewSMS(
                final String messageSid
    ) throws Throwable {
        APICallBackCatcher<String> callback = new APICallBackCatcher<String>();
        createViewSMSAsync(messageSid, callback);
        if(!callback.isSuccess())
            throw callback.getError();
        return callback.getResult();
    }

    /**
     * Retrieve a single SMS message object by its SmsSid.
     * @param    messageSid    Required parameter: The unique identifier for a sms message.
     * @return    Returns the void response from the API call 
     */
    public void createViewSMSAsync(
                final String messageSid,
                final APICallBack<String> callBack
    ) {
        Runnable _responseTask = new Runnable() {
            public void run() {
                //the base uri for api requests
                String _baseUri = Configuration.baseUri;

                //prepare query string for API call
                StringBuilder _queryBuilder = new StringBuilder(_baseUri);
                _queryBuilder.append("/sms/viewsms.json");
                //validate and preprocess url
                String _queryUrl = APIHelper.cleanUrl(_queryBuilder);

                //load all headers for the outgoing API request
                Map<String, String> _headers = new HashMap<String, String>() {
                    private static final long serialVersionUID = 9024873901054908219L;
                    {
                        put( "user-agent", "APIMATIC 2.0" );
                    }
                };

                //load all fields for the outgoing API request
                Map<String, Object> _parameters = new HashMap<String, Object>() {
                    private static final long serialVersionUID = 4562468121865988708L;
                    {
                        put( "MessageSid", messageSid );
                    }
                };

                //prepare and invoke the API call request to fetch the response
                final HttpRequest _request = getClientInstance().post(_queryUrl, _headers, APIHelper.prepareFormFields(_parameters),
                                                Configuration.basicAuthUserName, Configuration.basicAuthPassword);

                //invoke the callback before request if its not null
                if (getHttpCallBack() != null)
                {
                    getHttpCallBack().OnBeforeRequest(_request);
                }

                //invoke request and get response
                getClientInstance().executeAsStringAsync(_request, new APICallBack<HttpResponse>() {
                    public void onSuccess(HttpContext _context, HttpResponse _response) {
                        try {

                            //invoke the callback after response if its not null
                            if (getHttpCallBack() != null)	
                            {
                                getHttpCallBack().OnAfterResponse(_context);
                            }

                            //handle errors defined at the API level
                            validateResponse(_response, _context);

                            //extract result from the http response
                            String _result = ((HttpStringResponse)_response).getBody();
                            //let the caller know of the success
                            callBack.onSuccess(_context, _result);
                        } catch (APIException error) {
                            //let the caller know of the error
                            callBack.onFailure(_context, error);
                        } catch (Exception exception) {
                            //let the caller know of the caught Exception
                            callBack.onFailure(_context, exception);
                        }
                    }
                    public void onFailure(HttpContext _context, Throwable _error) {
                        //invoke the callback after response if its not null
                        if (getHttpCallBack() != null)
                        {
                            getHttpCallBack().OnAfterResponse(_context);
                        }

                        //let the caller know of the failure
                        callBack.onFailure(_context, _error);
                    }
                });
            }
        };

        //execute async using thread pool
        APIHelper.getScheduler().execute(_responseTask);
    }

    /**
     * Send an SMS from a Ytel number
     * @param    from    Required parameter: The 10-digit SMS-enabled Ytel number (E.164 format) in which the message is sent.
     * @param    to    Required parameter: The 10-digit phone number (E.164 format) that will receive the message.
     * @param    body    Required parameter: The body message that is to be sent in the text.
     * @param    method    Optional parameter: Specifies the HTTP method used to request the required URL once SMS sent.
     * @param    messageStatusCallback    Optional parameter: URL that can be requested to receive notification when SMS has Sent. A set of default parameters will be sent here once the SMS is finished.
     * @param    smartsms    Optional parameter: Check's 'to' number can receive sms or not using Carrier API, if wireless = true then text sms is sent, else wireless = false then call is recieved to end user with audible message.
     * @param    deliveryStatus    Optional parameter: Delivery reports are a method to tell your system if the message has arrived on the destination phone.
     * @return    Returns the String response from the API call 
     */
    public String createSendSMS(
                final String from,
                final String to,
                final String body,
                final String method,
                final String messageStatusCallback,
                final Boolean smartsms,
                final Boolean deliveryStatus
    ) throws Throwable {
        APICallBackCatcher<String> callback = new APICallBackCatcher<String>();
        createSendSMSAsync(from, to, body, method, messageStatusCallback, smartsms, deliveryStatus, callback);
        if(!callback.isSuccess())
            throw callback.getError();
        return callback.getResult();
    }

    /**
     * Send an SMS from a Ytel number
     * @param    from    Required parameter: The 10-digit SMS-enabled Ytel number (E.164 format) in which the message is sent.
     * @param    to    Required parameter: The 10-digit phone number (E.164 format) that will receive the message.
     * @param    body    Required parameter: The body message that is to be sent in the text.
     * @param    method    Optional parameter: Specifies the HTTP method used to request the required URL once SMS sent.
     * @param    messageStatusCallback    Optional parameter: URL that can be requested to receive notification when SMS has Sent. A set of default parameters will be sent here once the SMS is finished.
     * @param    smartsms    Optional parameter: Check's 'to' number can receive sms or not using Carrier API, if wireless = true then text sms is sent, else wireless = false then call is recieved to end user with audible message.
     * @param    deliveryStatus    Optional parameter: Delivery reports are a method to tell your system if the message has arrived on the destination phone.
     * @return    Returns the void response from the API call 
     */
    public void createSendSMSAsync(
                final String from,
                final String to,
                final String body,
                final String method,
                final String messageStatusCallback,
                final Boolean smartsms,
                final Boolean deliveryStatus,
                final APICallBack<String> callBack
    ) {
        Runnable _responseTask = new Runnable() {
            public void run() {
                //the base uri for api requests
                String _baseUri = Configuration.baseUri;

                //prepare query string for API call
                StringBuilder _queryBuilder = new StringBuilder(_baseUri);
                _queryBuilder.append("/sms/sendsms.json");
                //validate and preprocess url
                String _queryUrl = APIHelper.cleanUrl(_queryBuilder);

                //load all headers for the outgoing API request
                Map<String, String> _headers = new HashMap<String, String>() {
                    private static final long serialVersionUID = 9024873901054908219L;
                    {
                        put( "user-agent", "APIMATIC 2.0" );
                    }
                };

                //load all fields for the outgoing API request
                Map<String, Object> _parameters = new HashMap<String, Object>() {
                    private static final long serialVersionUID = -337594453L;
                    {
                        put( "From", from );
                        put( "To", to );
                        put( "Body", body );
                        put( "Method", method );
                        put( "MessageStatusCallback", messageStatusCallback );
                        put( "Smartsms", smartsms );
                        put( "DeliveryStatus", deliveryStatus );
                    }
                };

                //prepare and invoke the API call request to fetch the response
                final HttpRequest _request = getClientInstance().post(_queryUrl, _headers, APIHelper.prepareFormFields(_parameters),
                                                Configuration.basicAuthUserName, Configuration.basicAuthPassword);

                //invoke the callback before request if its not null
                if (getHttpCallBack() != null)
                {
                    getHttpCallBack().OnBeforeRequest(_request);
                }

                //invoke request and get response
                getClientInstance().executeAsStringAsync(_request, new APICallBack<HttpResponse>() {
                    public void onSuccess(HttpContext _context, HttpResponse _response) {
                        try {

                            //invoke the callback after response if its not null
                            if (getHttpCallBack() != null)	
                            {
                                getHttpCallBack().OnAfterResponse(_context);
                            }

                            //handle errors defined at the API level
                            validateResponse(_response, _context);

                            //extract result from the http response
                            String _result = ((HttpStringResponse)_response).getBody();
                            //let the caller know of the success
                            callBack.onSuccess(_context, _result);
                        } catch (APIException error) {
                            //let the caller know of the error
                            callBack.onFailure(_context, error);
                        } catch (Exception exception) {
                            //let the caller know of the caught Exception
                            callBack.onFailure(_context, exception);
                        }
                    }
                    public void onFailure(HttpContext _context, Throwable _error) {
                        //invoke the callback after response if its not null
                        if (getHttpCallBack() != null)
                        {
                            getHttpCallBack().OnAfterResponse(_context);
                        }

                        //let the caller know of the failure
                        callBack.onFailure(_context, _error);
                    }
                });
            }
        };

        //execute async using thread pool
        APIHelper.getScheduler().execute(_responseTask);
    }

    /**
     * Retrieve a list of Outbound SMS message objects.
     * @param    page    Optional parameter: The page count to retrieve from the total results in the collection. Page indexing starts at 1.
     * @param    pageSize    Optional parameter: Number of individual resources listed in the response per page
     * @param    from    Optional parameter: Filter SMS message objects from this valid 10-digit phone number (E.164 format).
     * @param    to    Optional parameter: Filter SMS message objects to this valid 10-digit phone number (E.164 format).
     * @param    dateSent    Optional parameter: Only list SMS messages sent in the specified date range
     * @return    Returns the String response from the API call 
     */
    public String createListSMS(
                final Integer page,
                final Integer pageSize,
                final String from,
                final String to,
                final String dateSent
    ) throws Throwable {
        APICallBackCatcher<String> callback = new APICallBackCatcher<String>();
        createListSMSAsync(page, pageSize, from, to, dateSent, callback);
        if(!callback.isSuccess())
            throw callback.getError();
        return callback.getResult();
    }

    /**
     * Retrieve a list of Outbound SMS message objects.
     * @param    page    Optional parameter: The page count to retrieve from the total results in the collection. Page indexing starts at 1.
     * @param    pageSize    Optional parameter: Number of individual resources listed in the response per page
     * @param    from    Optional parameter: Filter SMS message objects from this valid 10-digit phone number (E.164 format).
     * @param    to    Optional parameter: Filter SMS message objects to this valid 10-digit phone number (E.164 format).
     * @param    dateSent    Optional parameter: Only list SMS messages sent in the specified date range
     * @return    Returns the void response from the API call 
     */
    public void createListSMSAsync(
                final Integer page,
                final Integer pageSize,
                final String from,
                final String to,
                final String dateSent,
                final APICallBack<String> callBack
    ) {
        Runnable _responseTask = new Runnable() {
            public void run() {
                //the base uri for api requests
                String _baseUri = Configuration.baseUri;

                //prepare query string for API call
                StringBuilder _queryBuilder = new StringBuilder(_baseUri);
                _queryBuilder.append("/sms/listsms.json");
                //validate and preprocess url
                String _queryUrl = APIHelper.cleanUrl(_queryBuilder);

                //load all headers for the outgoing API request
                Map<String, String> _headers = new HashMap<String, String>() {
                    private static final long serialVersionUID = 9024873901054908219L;
                    {
                        put( "user-agent", "APIMATIC 2.0" );
                    }
                };

                //load all fields for the outgoing API request
                Map<String, Object> _parameters = new HashMap<String, Object>() {
                    private static final long serialVersionUID = -913762096L;
                    {
                        put( "Page", page );
                        put( "PageSize", pageSize );
                        put( "From", from );
                        put( "To", to );
                        put( "DateSent", dateSent );
                    }
                };

                //prepare and invoke the API call request to fetch the response
                final HttpRequest _request = getClientInstance().post(_queryUrl, _headers, APIHelper.prepareFormFields(_parameters),
                                                Configuration.basicAuthUserName, Configuration.basicAuthPassword);

                //invoke the callback before request if its not null
                if (getHttpCallBack() != null)
                {
                    getHttpCallBack().OnBeforeRequest(_request);
                }

                //invoke request and get response
                getClientInstance().executeAsStringAsync(_request, new APICallBack<HttpResponse>() {
                    public void onSuccess(HttpContext _context, HttpResponse _response) {
                        try {

                            //invoke the callback after response if its not null
                            if (getHttpCallBack() != null)	
                            {
                                getHttpCallBack().OnAfterResponse(_context);
                            }

                            //handle errors defined at the API level
                            validateResponse(_response, _context);

                            //extract result from the http response
                            String _result = ((HttpStringResponse)_response).getBody();
                            //let the caller know of the success
                            callBack.onSuccess(_context, _result);
                        } catch (APIException error) {
                            //let the caller know of the error
                            callBack.onFailure(_context, error);
                        } catch (Exception exception) {
                            //let the caller know of the caught Exception
                            callBack.onFailure(_context, exception);
                        }
                    }
                    public void onFailure(HttpContext _context, Throwable _error) {
                        //invoke the callback after response if its not null
                        if (getHttpCallBack() != null)
                        {
                            getHttpCallBack().OnAfterResponse(_context);
                        }

                        //let the caller know of the failure
                        callBack.onFailure(_context, _error);
                    }
                });
            }
        };

        //execute async using thread pool
        APIHelper.getScheduler().execute(_responseTask);
    }

    /**
     * Retrieve a list of Inbound SMS message objects.
     * @param    page    Optional parameter: The page count to retrieve from the total results in the collection. Page indexing starts at 1.
     * @param    pageSize    Optional parameter: The count of objects to return per page.
     * @param    from    Optional parameter: Filter SMS message objects from this valid 10-digit phone number (E.164 format).
     * @param    to    Optional parameter: Filter SMS message objects to this valid 10-digit phone number (E.164 format).
     * @param    dateSent    Optional parameter: Filter sms message objects by this date.
     * @return    Returns the String response from the API call 
     */
    public String createListInboundSMS(
                final Integer page,
                final Integer pageSize,
                final String from,
                final String to,
                final String dateSent
    ) throws Throwable {
        APICallBackCatcher<String> callback = new APICallBackCatcher<String>();
        createListInboundSMSAsync(page, pageSize, from, to, dateSent, callback);
        if(!callback.isSuccess())
            throw callback.getError();
        return callback.getResult();
    }

    /**
     * Retrieve a list of Inbound SMS message objects.
     * @param    page    Optional parameter: The page count to retrieve from the total results in the collection. Page indexing starts at 1.
     * @param    pageSize    Optional parameter: The count of objects to return per page.
     * @param    from    Optional parameter: Filter SMS message objects from this valid 10-digit phone number (E.164 format).
     * @param    to    Optional parameter: Filter SMS message objects to this valid 10-digit phone number (E.164 format).
     * @param    dateSent    Optional parameter: Filter sms message objects by this date.
     * @return    Returns the void response from the API call 
     */
    public void createListInboundSMSAsync(
                final Integer page,
                final Integer pageSize,
                final String from,
                final String to,
                final String dateSent,
                final APICallBack<String> callBack
    ) {
        Runnable _responseTask = new Runnable() {
            public void run() {
                //the base uri for api requests
                String _baseUri = Configuration.baseUri;

                //prepare query string for API call
                StringBuilder _queryBuilder = new StringBuilder(_baseUri);
                _queryBuilder.append("/sms/getinboundsms.json");
                //validate and preprocess url
                String _queryUrl = APIHelper.cleanUrl(_queryBuilder);

                //load all headers for the outgoing API request
                Map<String, String> _headers = new HashMap<String, String>() {
                    private static final long serialVersionUID = 9024873901054908219L;
                    {
                        put( "user-agent", "APIMATIC 2.0" );
                    }
                };

                //load all fields for the outgoing API request
                Map<String, Object> _parameters = new HashMap<String, Object>() {
                    private static final long serialVersionUID = -913762096L;
                    {
                        put( "Page", page );
                        put( "PageSize", pageSize );
                        put( "From", from );
                        put( "To", to );
                        put( "DateSent", dateSent );
                    }
                };

                //prepare and invoke the API call request to fetch the response
                final HttpRequest _request = getClientInstance().post(_queryUrl, _headers, APIHelper.prepareFormFields(_parameters),
                                                Configuration.basicAuthUserName, Configuration.basicAuthPassword);

                //invoke the callback before request if its not null
                if (getHttpCallBack() != null)
                {
                    getHttpCallBack().OnBeforeRequest(_request);
                }

                //invoke request and get response
                getClientInstance().executeAsStringAsync(_request, new APICallBack<HttpResponse>() {
                    public void onSuccess(HttpContext _context, HttpResponse _response) {
                        try {

                            //invoke the callback after response if its not null
                            if (getHttpCallBack() != null)	
                            {
                                getHttpCallBack().OnAfterResponse(_context);
                            }

                            //handle errors defined at the API level
                            validateResponse(_response, _context);

                            //extract result from the http response
                            String _result = ((HttpStringResponse)_response).getBody();
                            //let the caller know of the success
                            callBack.onSuccess(_context, _result);
                        } catch (APIException error) {
                            //let the caller know of the error
                            callBack.onFailure(_context, error);
                        } catch (Exception exception) {
                            //let the caller know of the caught Exception
                            callBack.onFailure(_context, exception);
                        }
                    }
                    public void onFailure(HttpContext _context, Throwable _error) {
                        //invoke the callback after response if its not null
                        if (getHttpCallBack() != null)
                        {
                            getHttpCallBack().OnAfterResponse(_context);
                        }

                        //let the caller know of the failure
                        callBack.onFailure(_context, _error);
                    }
                });
            }
        };

        //execute async using thread pool
        APIHelper.getScheduler().execute(_responseTask);
    }

}